// Autogenerated file: DO NOT EDIT
// Created on 2025-06-05 2:34:17 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;
using Ara3D.Collections;

namespace Ara3D.Geometry
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct Quad3D: IDeformable3D<Quad3D>, IArrayLike<Quad3D, Point3D>
    {
        // Fields
        [DataMember] public readonly Point3D A;
        [DataMember] public readonly Point3D B;
        [DataMember] public readonly Point3D C;
        [DataMember] public readonly Point3D D;

        // With functions 
        [MethodImpl(AggressiveInlining)] public Quad3D WithA(Point3D a) => new Quad3D(a, B, C, D);
        [MethodImpl(AggressiveInlining)] public Quad3D WithB(Point3D b) => new Quad3D(A, b, C, D);
        [MethodImpl(AggressiveInlining)] public Quad3D WithC(Point3D c) => new Quad3D(A, B, c, D);
        [MethodImpl(AggressiveInlining)] public Quad3D WithD(Point3D d) => new Quad3D(A, B, C, d);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public Quad3D(Point3D a, Point3D b, Point3D c, Point3D d) { A = a; B = b; C = c; D = d; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static Quad3D Create(Point3D a, Point3D b, Point3D c, Point3D d) => new Quad3D(a, b, c, d);

        // Static default implementation
        public static readonly Quad3D Default = default;

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (Point3D, Point3D, Point3D, Point3D)(Quad3D self) => (self.A, self.B, self.C, self.D);
        [MethodImpl(AggressiveInlining)] public static implicit operator Quad3D((Point3D, Point3D, Point3D, Point3D) value) => new Quad3D(value.Item1, value.Item2, value.Item3, value.Item4);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out Point3D a, out Point3D b, out Point3D c, out Point3D d) { a = A; b = B; c = C; d = D;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(Quad3D other) => A.Equals(other.A) && B.Equals(other.B) && C.Equals(other.C) && D.Equals(other.D);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Quad3D other) => !A.Equals(other.A) && B.Equals(other.B) && C.Equals(other.C) && D.Equals(other.D);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Quad3D other ? Equals(other).Value : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(A, B, C, D);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"A\" = {A}, \"B\" = {B}, \"C\" = {C}, \"D\" = {D} }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // IArrayLike predefined functions
        public Integer NumComponents { [MethodImpl(AggressiveInlining)] get => 4; }
        public IReadOnlyList<Point3D> Components { [MethodImpl(AggressiveInlining)] get => Intrinsics.MakeArray<Point3D>(A, B, C, D); }
        [MethodImpl(AggressiveInlining)] public static Quad3D CreateFromComponents(IReadOnlyList<Point3D> numbers) => new Quad3D(numbers[0], numbers[1], numbers[2], numbers[3]);

        [MethodImpl(AggressiveInlining)] public static Quad3D CreateFromComponent(Point3D x) => new Quad3D(x, x, x, x);

        // Implemented interface functions
        public Quad3D Flip { [MethodImpl(AggressiveInlining)] get  => (this.D, this.C, this.B, this.A); } 
public Point3D Center { [MethodImpl(AggressiveInlining)] get  => this.A.Add(this.B.Add(this.C.Add(this.D))).Divide(((Number)4)); } 
public Line3D LineA { [MethodImpl(AggressiveInlining)] get  => (this.A, this.B); } 
public Line3D LineB { [MethodImpl(AggressiveInlining)] get  => (this.B, this.C); } 
public Line3D LineC { [MethodImpl(AggressiveInlining)] get  => (this.C, this.D); } 
public Line3D LineD { [MethodImpl(AggressiveInlining)] get  => (this.D, this.A); } 
public Triangle3D TriangleA { [MethodImpl(AggressiveInlining)] get  => (this.A, this.B, this.C); } 
public Triangle3D TriangleB { [MethodImpl(AggressiveInlining)] get  => (this.C, this.D, this.A); } 
// AMBIGUOUS FUNCTIONS 2
        /* Geometry_14.Points(q: Quad3D): IArray<Point3D> [Library]; */
        /* Meshes_18.Points(x: Quad3D): IArray<Point3D> [Library]; */
        public IReadOnlyList<Point3D> Points { [MethodImpl(AggressiveInlining)] get  => this.Components; } 
public Number Area { [MethodImpl(AggressiveInlining)] get  => this.TriangleA.Area.Add(this.TriangleB.Area); } 
public Vector3 Normal { [MethodImpl(AggressiveInlining)] get  => this.TriangleA.Normal.Average(this.TriangleB.Normal).Normalize; } 
public IReadOnlyList<Line3D> Lines { [MethodImpl(AggressiveInlining)] get  => Intrinsics.MakeArray(this.LineA, this.LineB, this.LineC, this.LineD); } 
public IReadOnlyList<Triangle3D> Triangles { [MethodImpl(AggressiveInlining)] get  => Intrinsics.MakeArray(this.TriangleA, this.TriangleB); } 
[MethodImpl(AggressiveInlining)] public Quad3D Deform(System.Func<Point3D, Point3D> f) => (f.Invoke(this.A), f.Invoke(this.B), f.Invoke(this.C), f.Invoke(this.D));
[MethodImpl(AggressiveInlining)] public Quad3D Transform(Transform3D t){
            var _var65 = t;
            return this.Deform((p)  => p.Vector3.Transform(_var65.Matrix));
        }

[MethodImpl(AggressiveInlining)] public Quad3D Scale(Vector3 v) => this.Transform(new Scaling3D(v));
[MethodImpl(AggressiveInlining)] public Quad3D Scale(Number s) => this.Scale((s, s, s));
[MethodImpl(AggressiveInlining)] public Quad3D ScaleX(Number s) => this.Scale((s, ((Integer)1), ((Integer)1)));
[MethodImpl(AggressiveInlining)] public Quad3D ScaleY(Number s) => this.Scale((((Integer)1), s, ((Integer)1)));
[MethodImpl(AggressiveInlining)] public Quad3D ScaleZ(Number s) => this.Scale((((Integer)1), ((Integer)1), s));
[MethodImpl(AggressiveInlining)] public Quad3D Rotate(Quaternion q) => this.Transform(new Rotation3D(q));
[MethodImpl(AggressiveInlining)] public Quad3D RotateX(Angle a) => this.Rotate(a.RotateX);
[MethodImpl(AggressiveInlining)] public Quad3D RotateY(Angle a) => this.Rotate(a.RotateY);
[MethodImpl(AggressiveInlining)] public Quad3D RotateZ(Angle a) => this.Rotate(a.RotateZ);
[MethodImpl(AggressiveInlining)] public Quad3D Translate(Vector3 v) => this.Transform(new Translation3D(v));
[MethodImpl(AggressiveInlining)] public Quad3D TranslateX(Number s) => this.Translate(s.XVector3);
[MethodImpl(AggressiveInlining)] public Quad3D TranslateY(Number s) => this.Translate(s.YVector3);
[MethodImpl(AggressiveInlining)] public Quad3D TranslateZ(Number s) => this.Translate(s.ZVector3);
[MethodImpl(AggressiveInlining)] public Point3D At(Integer n) => this.Components[n];
public Point3D this[Integer n] { [MethodImpl(AggressiveInlining)]  get => At(n); }
        [MethodImpl(AggressiveInlining)] public Quad3D MapComponents(System.Func<Point3D, Point3D> f) => Quad3D.CreateFromComponents(this.Components.Map(f));
[MethodImpl(AggressiveInlining)] public Quad3D ZipComponents(Quad3D b, System.Func<Point3D, Point3D, Point3D> f) => Quad3D.CreateFromComponents(this.Components.Zip(b.Components, f));
[MethodImpl(AggressiveInlining)] public Quad3D ZipComponents(Quad3D b, Quad3D c, System.Func<Point3D, Point3D, Point3D, Point3D> f) => Quad3D.CreateFromComponents(this.Components.Zip(b.Components, c.Components, f));
[MethodImpl(AggressiveInlining)] public Boolean AllZipComponents(Quad3D b, System.Func<Point3D, Point3D, Boolean> f) => this.Components.Zip(b.Components, f).All((x)  => x);
[MethodImpl(AggressiveInlining)] public Boolean AllZipComponents(Quad3D b, Quad3D c, System.Func<Point3D, Point3D, Point3D, Boolean> f) => this.Components.Zip(b.Components, c.Components, f).All((x)  => x);
[MethodImpl(AggressiveInlining)] public Boolean AnyZipComponents(Quad3D b, System.Func<Point3D, Point3D, Boolean> f) => this.Components.Zip(b.Components, f).Any((x)  => x);
[MethodImpl(AggressiveInlining)] public Boolean AnyZipComponents(Quad3D b, Quad3D c, System.Func<Point3D, Point3D, Point3D, Boolean> f) => this.Components.Zip(b.Components, c.Components, f).Any((x)  => x);
[MethodImpl(AggressiveInlining)] public Boolean AllComponents(System.Func<Point3D, Boolean> predicate) => this.Components.All(predicate);
[MethodImpl(AggressiveInlining)] public Boolean AnyComponent(System.Func<Point3D, Boolean> predicate) => this.Components.Any(predicate);

        // Unimplemented interface functions
    }
    // Extension methods for the type
    public static class Quad3DExtensions
    {
    }
}
