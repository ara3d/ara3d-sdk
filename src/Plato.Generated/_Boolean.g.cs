// Autogenerated file: DO NOT EDIT
// Created on 2025-06-04 10:07:55 AM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;
using Ara3D.Collections;

namespace Plato
{
    [StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct Boolean: IValue, IOrderable<Boolean>, IBoolean<Boolean>
    {
        // Static factory function
        [MethodImpl(AggressiveInlining)] public static Boolean Create() => new Boolean();

        // Static default implementation
        public static readonly Boolean Default = default;

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(Boolean other) => Value.Equals(other.Value);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Boolean other) => !Value.Equals(other.Value);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Boolean other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public static Boolean operator==(Boolean a, Boolean b) => a.Equals(b);
        [MethodImpl(AggressiveInlining)] public static Boolean operator!=(Boolean a, Boolean b) => !a.Equals(b);
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Value.GetHashCode();
        [MethodImpl(AggressiveInlining)] public override string ToString() => Value.ToString();

        // Explicit implementation of interfaces by forwarding properties to fields

        // Implemented interface functions
        [MethodImpl(AggressiveInlining)] public Boolean BitwiseAnd(Boolean b) => this & b;
        [MethodImpl(AggressiveInlining)] public Boolean BitwiseOr(Boolean b) => this | b;
        public Boolean Not { [MethodImpl(AggressiveInlining)] get => !this; }
        [MethodImpl(AggressiveInlining)] public Boolean LessThan(Boolean b) => this.LessThanOrEquals(b).And(this.NotEquals(b));
[MethodImpl(AggressiveInlining)] public Boolean GreaterThan(Boolean b) => b.LessThan(this);
[MethodImpl(AggressiveInlining)] public Boolean GreaterThanOrEquals(Boolean b) => b.LessThanOrEquals(this);
[MethodImpl(AggressiveInlining)] public Boolean Lesser(Boolean b) => this.LessThanOrEquals(b) ? this : b;
[MethodImpl(AggressiveInlining)] public Boolean Greater(Boolean b) => this.GreaterThanOrEquals(b) ? this : b;

        // Unimplemented interface functions
        [MethodImpl(AggressiveInlining)] public Boolean And(Boolean b) => this & b;
        [MethodImpl(AggressiveInlining)] public Boolean Or(Boolean b) => this | b;
        [MethodImpl(AggressiveInlining)] public Boolean LessThanOrEquals(Boolean y) => this <= y;
    }
    // Extension methods for the type
    public static partial class Extensions
    {
        [MethodImpl(AggressiveInlining)] public static Boolean And(this Boolean a, Boolean b) => a.And(b);
        [MethodImpl(AggressiveInlining)] public static Boolean And(this bool a, Boolean b) => ((Boolean)a).And(b);
        [MethodImpl(AggressiveInlining)] public static Boolean Or(this Boolean a, Boolean b) => a.Or(b);
        [MethodImpl(AggressiveInlining)] public static Boolean Or(this bool a, Boolean b) => ((Boolean)a).Or(b);
        [MethodImpl(AggressiveInlining)] public static Boolean LessThanOrEquals(this Boolean x, Boolean y) => x.LessThanOrEquals(y);
        [MethodImpl(AggressiveInlining)] public static Boolean LessThanOrEquals(this bool x, Boolean y) => ((Boolean)x).LessThanOrEquals(y);
        [MethodImpl(AggressiveInlining)] public static Boolean BitwiseAnd(this Boolean a, Boolean b) => a.BitwiseAnd(b);
        [MethodImpl(AggressiveInlining)] public static Boolean BitwiseAnd(this bool a, Boolean b) => ((Boolean)a).BitwiseAnd(b);
        [MethodImpl(AggressiveInlining)] public static Boolean BitwiseOr(this Boolean a, Boolean b) => a.BitwiseOr(b);
        [MethodImpl(AggressiveInlining)] public static Boolean BitwiseOr(this bool a, Boolean b) => ((Boolean)a).BitwiseOr(b);
        [MethodImpl(AggressiveInlining)] public static Boolean ExclusiveOr(this Boolean a, Boolean b) => a.ExclusiveOr(b);
        [MethodImpl(AggressiveInlining)] public static Boolean ExclusiveOr(this bool a, Boolean b) => ((Boolean)a).ExclusiveOr(b);
        [MethodImpl(AggressiveInlining)] public static Boolean Not(this Boolean b) => b.Not;
        [MethodImpl(AggressiveInlining)] public static Boolean Not(this bool b) => ((Boolean)b).Not;
        [MethodImpl(AggressiveInlining)] public static Integer CompareTo(this Boolean self, Boolean other) => self.CompareTo(other);
        [MethodImpl(AggressiveInlining)] public static Integer CompareTo(this bool self, Boolean other) => ((Boolean)self).CompareTo(other);
        [MethodImpl(AggressiveInlining)] public static Boolean LessThan(this bool a, Boolean b) => ((Boolean)a).LessThan(b);
        [MethodImpl(AggressiveInlining)] public static Boolean GreaterThan(this bool a, Boolean b) => ((Boolean)a).GreaterThan(b);
        [MethodImpl(AggressiveInlining)] public static Boolean GreaterThanOrEquals(this bool a, Boolean b) => ((Boolean)a).GreaterThanOrEquals(b);
        [MethodImpl(AggressiveInlining)] public static Boolean Lesser(this bool a, Boolean b) => ((Boolean)a).Lesser(b);
        [MethodImpl(AggressiveInlining)] public static Boolean Greater(this bool a, Boolean b) => ((Boolean)a).Greater(b);
    }
}
