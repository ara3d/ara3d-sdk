// Autogenerated file: DO NOT EDIT
// Created on 2025-06-07 1:42:34 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;
using Ara3D.Collections;

namespace Ara3D.Geometry
{
    [StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct Number: IRealNumber<Number>
    {
        // Static factory function
        [MethodImpl(AggressiveInlining)] public static Number Create() => new Number();

        // Static default implementation
        public static readonly Number Default = default;

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(Number other) => Value.Equals(other.Value);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Number other) => !Value.Equals(other.Value);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Number other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public static Boolean operator==(Number a, Number b) => a.Equals(b);
        [MethodImpl(AggressiveInlining)] public static Boolean operator!=(Number a, Number b) => !a.Equals(b);
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Value.GetHashCode();
        [MethodImpl(AggressiveInlining)] public override string ToString() => Value.ToString();

        // Explicit implementation of interfaces by forwarding properties to fields

        // Implemented interface functions
        public Angle Turns { [MethodImpl(AggressiveInlining)] get  => this.Multiply(Constants.TwoPi); } 
public Angle Degrees { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)360)).Turns; } 
public Angle Gradians { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)400)).Turns; } 
public Angle ArcMinutes { [MethodImpl(AggressiveInlining)] get  => this.Multiply(((Number)60)).Degrees; } 
public Angle ArcSeconds { [MethodImpl(AggressiveInlining)] get  => this.Multiply(((Number)60)).ArcMinutes; } 
[MethodImpl(AggressiveInlining)] public Boolean AlmostEqual(Number y) => this.Subtract(y).Abs.LessThanOrEquals(this.MultiplyEpsilon(y));
public Boolean AlmostZero { [MethodImpl(AggressiveInlining)] get  => this.Abs.LessThan(Constants.Epsilon); } 
public Boolean AlmostZeroOrOne { [MethodImpl(AggressiveInlining)] get  => this.AlmostEqual(Zero).Or(this.AlmostEqual(One)); } 
// AMBIGUOUS FUNCTIONS 2
        /* Core_7.Average(x: Number,y: Number): Number [Library]; */
        /* Core_7.Average(a: IInterpolatable,b: IInterpolatable): IInterpolatable [Library]; */
        [MethodImpl(AggressiveInlining)] public Number Average(Number y) => this.Add(y).Half;
[MethodImpl(AggressiveInlining)] public Boolean Between(Number a, Number b) => this.GreaterThanOrEquals(a).And(this.LessThanOrEquals(b));
public Boolean Between01 { [MethodImpl(AggressiveInlining)] get  => this.Between(((Number)0), ((Number)1)); } 
public Number ClampZeroOne { [MethodImpl(AggressiveInlining)] get  => this.Clamp(Zero, One); } 
public Number Fract { [MethodImpl(AggressiveInlining)] get  => this.Subtract(this.Floor); } 
public Number FromOne { [MethodImpl(AggressiveInlining)] get  => ((Number)1).Subtract(this); } 
[MethodImpl(AggressiveInlining)] public Number InversePow(Number y) => this.Pow(y.Reciprocal);
[MethodImpl(AggressiveInlining)] public Number Lerp(Number b, Number t) => this.Multiply(t.FromOne).Add(b.Multiply(t));
[MethodImpl(AggressiveInlining)] public Number MultiplyEpsilon(Number y) => this.Abs.Greater(y.Abs).Multiply(Constants.Epsilon);
public Number Pow2 { [MethodImpl(AggressiveInlining)] get  => this.Multiply(this); } 
public Number Pow3 { [MethodImpl(AggressiveInlining)] get  => this.Multiply(this.Multiply(this)); } 
public Number Pow4 { [MethodImpl(AggressiveInlining)] get  => this.Multiply(this.Multiply(this.Multiply(this))); } 
public Number Pow5 { [MethodImpl(AggressiveInlining)] get  => this.Multiply(this.Multiply(this.Multiply(this.Multiply(this)))); } 
public Number Sqr { [MethodImpl(AggressiveInlining)] get  => this.Pow2; } 
[MethodImpl(AggressiveInlining)] public _T0 Multiply<_T0>(_T0 x) where _T0 : IScalarArithmetic<_T0> => x.Multiply(this);
[MethodImpl(AggressiveInlining)] public Number SineWave(Number amplitude, Number frequency, Number phase) => amplitude.Multiply(frequency.Multiply(this.Turns.Sin).Add(phase));
[MethodImpl(AggressiveInlining)] public Number StaircaseFloor(Integer steps) => this.Multiply(steps).Floor.Divide(steps);
[MethodImpl(AggressiveInlining)] public Number StaircaseCeiling(Integer steps) => this.Multiply(steps).Ceiling.Divide(steps);
[MethodImpl(AggressiveInlining)] public Number StaircaseRound(Integer steps) => this.Multiply(steps).Round(((Integer)0)).Divide(steps);
[MethodImpl(AggressiveInlining)] public Point2D Spiral(Number R, Number r, Number numTurns) => new Vector2(this.Turns.Multiply(numTurns).Cos, this.Turns.Multiply(numTurns).Sin).Multiply(r.Lerp(R, this));
[MethodImpl(AggressiveInlining)] public Matrix4x4 Multiply(Matrix4x4 value1) => this * value1;
        [MethodImpl(AggressiveInlining)] public Matrix3x2 Multiply(Matrix3x2 value1) => this * value1;
        [MethodImpl(AggressiveInlining)] public Vector2 Multiply(Vector2 right) => this * right;
        [MethodImpl(AggressiveInlining)] public Vector3 Multiply(Vector3 right) => this * right;
        [MethodImpl(AggressiveInlining)] public Vector4 Multiply(Vector4 right) => this * right;
        [MethodImpl(AggressiveInlining)] public Vector8 Multiply(Vector8 right) => this * right;
        [MethodImpl(AggressiveInlining)] public Vector8 Divide(Vector8 right) => this / right;
        [MethodImpl(AggressiveInlining)] public Number Add(Number b) => this + b;
        [MethodImpl(AggressiveInlining)] public Number Subtract(Number b) => this - b;
        [MethodImpl(AggressiveInlining)] public Number Multiply(Number b) => this * b;
        [MethodImpl(AggressiveInlining)] public Number Divide(Number b) => this / b;
        public Number Negative { [MethodImpl(AggressiveInlining)] get => -this; }
        [MethodImpl(AggressiveInlining)] public Boolean LessThan(Number b) => this < b;
        [MethodImpl(AggressiveInlining)] public Boolean LessThanOrEquals(Number b) => this <= b;
        [MethodImpl(AggressiveInlining)] public Boolean GreaterThan(Number b) => this > b;
        [MethodImpl(AggressiveInlining)] public Boolean GreaterThanOrEquals(Number b) => this >= b;
        [MethodImpl(AggressiveInlining)] public Angle Multiply(Angle a) => this * a;
        public Translation3D TranslationX { [MethodImpl(AggressiveInlining)] get  => this.XVector3; } 
public Translation3D TranslationY { [MethodImpl(AggressiveInlining)] get  => this.YVector3; } 
public Translation3D TranslationZ { [MethodImpl(AggressiveInlining)] get  => this.ZVector3; } 
public Scaling3D UniformScaling3D { [MethodImpl(AggressiveInlining)] get  => new Vector3(this); } 
public Vector2 Vector2 { [MethodImpl(AggressiveInlining)] get  => (this, this); } 
[MethodImpl(AggressiveInlining)]  public static implicit operator Vector2(Number s) => s.Vector2;
        public Vector2 XVector2 { [MethodImpl(AggressiveInlining)] get  => (this, ((Number)0)); } 
public Vector2 YVector2 { [MethodImpl(AggressiveInlining)] get  => (((Number)0), this); } 
public Vector3 Vector3 { [MethodImpl(AggressiveInlining)] get  => (this, this, this); } 
[MethodImpl(AggressiveInlining)]  public static implicit operator Vector3(Number s) => s.Vector3;
        public Vector3 XVector3 { [MethodImpl(AggressiveInlining)] get  => (this, ((Number)0), ((Number)0)); } 
public Vector3 YVector3 { [MethodImpl(AggressiveInlining)] get  => (((Number)0), this, ((Number)0)); } 
public Vector3 ZVector3 { [MethodImpl(AggressiveInlining)] get  => (((Number)0), ((Number)0), this); } 
public Vector4 Vector4 { [MethodImpl(AggressiveInlining)] get  => (this, this, this, this); } 
[MethodImpl(AggressiveInlining)]  public static implicit operator Vector4(Number s) => s.Vector4;
        public Vector4 XVector4 { [MethodImpl(AggressiveInlining)] get  => (this, ((Number)0), ((Number)0), ((Number)0)); } 
public Vector4 YVector4 { [MethodImpl(AggressiveInlining)] get  => (((Number)0), this, ((Number)0), ((Number)0)); } 
public Vector4 ZVector4 { [MethodImpl(AggressiveInlining)] get  => (((Number)0), ((Number)0), this, ((Number)0)); } 
public Vector4 WVector4 { [MethodImpl(AggressiveInlining)] get  => (((Number)0), ((Number)0), ((Number)0), this); } 
public Vector8 Vector8 { [MethodImpl(AggressiveInlining)] get  => (this, this, this, this, this, this, this, this); } 
[MethodImpl(AggressiveInlining)]  public static implicit operator Vector8(Number s) => s.Vector8;
        [MethodImpl(AggressiveInlining)] public IReadOnlyList<Number> Sample(Number b, Integer n){
            var _var76 = b;
            {
                var _var75 = this;
                return n.LinearSpace.Map((i)  => _var75.Lerp(_var76, i));
            }
        }

public Number Half { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)2)); } 
public Number Quarter { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)4)); } 
public Number Eight { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)8)); } 
public Number Sixteenth { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)16)); } 
public Number Tenth { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)10)); } 
public Number Twice { [MethodImpl(AggressiveInlining)] get  => this.Multiply(((Number)2)); } 
public Number Hundred { [MethodImpl(AggressiveInlining)] get  => this.Multiply(((Number)100)); } 
public Number Thousand { [MethodImpl(AggressiveInlining)] get  => this.Multiply(((Number)1000)); } 
public Number Million { [MethodImpl(AggressiveInlining)] get  => this.Thousand.Thousand; } 
public Number Billion { [MethodImpl(AggressiveInlining)] get  => this.Thousand.Million; } 
public Number Hundredth { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)100)); } 
public Number Thousandth { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)1000)); } 
public Number Millionth { [MethodImpl(AggressiveInlining)] get  => this.Thousandth.Thousandth; } 
public Number Billionth { [MethodImpl(AggressiveInlining)] get  => this.Thousandth.Millionth; } 
[MethodImpl(AggressiveInlining)] public Number Lesser(Number b) => this.LessThanOrEquals(b) ? this : b;
[MethodImpl(AggressiveInlining)] public Number Greater(Number b) => this.GreaterThanOrEquals(b) ? this : b;

        // Unimplemented interface functions
        [MethodImpl(AggressiveInlining)] public Number Modulo(Number b) => this % b;
    }
    // Extension methods for the type
    public static class NumberExtensions
    {
        [MethodImpl(AggressiveInlining)] public static Number Modulo(this Number a, Number b) => a.Modulo(b);
        [MethodImpl(AggressiveInlining)] public static Number Modulo(this float a, Number b) => ((Number)a).Modulo(b);
        [MethodImpl(AggressiveInlining)] public static Angle Turns(this float x) => ((Number)x).Turns;
        [MethodImpl(AggressiveInlining)] public static Angle Degrees(this float x) => ((Number)x).Degrees;
        [MethodImpl(AggressiveInlining)] public static Angle Gradians(this float x) => ((Number)x).Gradians;
        [MethodImpl(AggressiveInlining)] public static Angle ArcMinutes(this float x) => ((Number)x).ArcMinutes;
        [MethodImpl(AggressiveInlining)] public static Angle ArcSeconds(this float x) => ((Number)x).ArcSeconds;
        [MethodImpl(AggressiveInlining)] public static Boolean AlmostEqual(this float x, Number y) => ((Number)x).AlmostEqual(y);
        [MethodImpl(AggressiveInlining)] public static Boolean AlmostZero(this float x) => ((Number)x).AlmostZero;
        [MethodImpl(AggressiveInlining)] public static Boolean AlmostZeroOrOne(this float x) => ((Number)x).AlmostZeroOrOne;
        [MethodImpl(AggressiveInlining)] public static Number Average(this float x, Number y) => ((Number)x).Average(y);
        [MethodImpl(AggressiveInlining)] public static Boolean Between(this float x, Number a, Number b) => ((Number)x).Between(a, b);
        [MethodImpl(AggressiveInlining)] public static Boolean Between01(this float x) => ((Number)x).Between01;
        [MethodImpl(AggressiveInlining)] public static Number ClampZeroOne(this float x) => ((Number)x).ClampZeroOne;
        [MethodImpl(AggressiveInlining)] public static Number Fract(this float x) => ((Number)x).Fract;
        [MethodImpl(AggressiveInlining)] public static Number FromOne(this float x) => ((Number)x).FromOne;
        [MethodImpl(AggressiveInlining)] public static Number InversePow(this float x, Number y) => ((Number)x).InversePow(y);
        [MethodImpl(AggressiveInlining)] public static Number Lerp(this float a, Number b, Number t) => ((Number)a).Lerp(b, t);
        [MethodImpl(AggressiveInlining)] public static Number MultiplyEpsilon(this float x, Number y) => ((Number)x).MultiplyEpsilon(y);
        [MethodImpl(AggressiveInlining)] public static Number Pow2(this float x) => ((Number)x).Pow2;
        [MethodImpl(AggressiveInlining)] public static Number Pow3(this float x) => ((Number)x).Pow3;
        [MethodImpl(AggressiveInlining)] public static Number Pow4(this float x) => ((Number)x).Pow4;
        [MethodImpl(AggressiveInlining)] public static Number Pow5(this float x) => ((Number)x).Pow5;
        [MethodImpl(AggressiveInlining)] public static Number Sqr(this float x) => ((Number)x).Sqr;
        [MethodImpl(AggressiveInlining)] public static Number SineWave(this float x, Number amplitude, Number frequency, Number phase) => ((Number)x).SineWave(amplitude, frequency, phase);
        [MethodImpl(AggressiveInlining)] public static Number StaircaseFloor(this float x, Integer steps) => ((Number)x).StaircaseFloor(steps);
        [MethodImpl(AggressiveInlining)] public static Number StaircaseCeiling(this float x, Integer steps) => ((Number)x).StaircaseCeiling(steps);
        [MethodImpl(AggressiveInlining)] public static Number StaircaseRound(this float x, Integer steps) => ((Number)x).StaircaseRound(steps);
        [MethodImpl(AggressiveInlining)] public static Point2D Spiral(this float t, Number R, Number r, Number numTurns) => ((Number)t).Spiral(R, r, numTurns);
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 Multiply(this Number f, Matrix4x4 value1) => f.Multiply(value1);
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 Multiply(this float f, Matrix4x4 value1) => ((Number)f).Multiply(value1);
        [MethodImpl(AggressiveInlining)] public static Matrix3x2 Multiply(this Number scalar, Matrix3x2 value1) => scalar.Multiply(value1);
        [MethodImpl(AggressiveInlining)] public static Matrix3x2 Multiply(this float scalar, Matrix3x2 value1) => ((Number)scalar).Multiply(value1);
        [MethodImpl(AggressiveInlining)] public static Vector2 Multiply(this Number scalar, Vector2 right) => scalar.Multiply(right);
        [MethodImpl(AggressiveInlining)] public static Vector2 Multiply(this float scalar, Vector2 right) => ((Number)scalar).Multiply(right);
        [MethodImpl(AggressiveInlining)] public static Vector3 Multiply(this Number scalar, Vector3 right) => scalar.Multiply(right);
        [MethodImpl(AggressiveInlining)] public static Vector3 Multiply(this float scalar, Vector3 right) => ((Number)scalar).Multiply(right);
        [MethodImpl(AggressiveInlining)] public static Vector4 Multiply(this Number scalar, Vector4 right) => scalar.Multiply(right);
        [MethodImpl(AggressiveInlining)] public static Vector4 Multiply(this float scalar, Vector4 right) => ((Number)scalar).Multiply(right);
        [MethodImpl(AggressiveInlining)] public static Vector8 Multiply(this Number scalar, Vector8 right) => scalar.Multiply(right);
        [MethodImpl(AggressiveInlining)] public static Vector8 Multiply(this float scalar, Vector8 right) => ((Number)scalar).Multiply(right);
        [MethodImpl(AggressiveInlining)] public static Vector8 Divide(this Number scalar, Vector8 right) => scalar.Divide(right);
        [MethodImpl(AggressiveInlining)] public static Vector8 Divide(this float scalar, Vector8 right) => ((Number)scalar).Divide(right);
        [MethodImpl(AggressiveInlining)] public static Number Abs(this Number self) => self.Abs;
        [MethodImpl(AggressiveInlining)] public static Number Abs(this float self) => ((Number)self).Abs;
        [MethodImpl(AggressiveInlining)] public static Angle Acos(this Number self) => self.Acos;
        [MethodImpl(AggressiveInlining)] public static Angle Acos(this float self) => ((Number)self).Acos;
        [MethodImpl(AggressiveInlining)] public static Angle Acosh(this Number self) => self.Acosh;
        [MethodImpl(AggressiveInlining)] public static Angle Acosh(this float self) => ((Number)self).Acosh;
        [MethodImpl(AggressiveInlining)] public static Angle Asin(this Number self) => self.Asin;
        [MethodImpl(AggressiveInlining)] public static Angle Asin(this float self) => ((Number)self).Asin;
        [MethodImpl(AggressiveInlining)] public static Angle Asinh(this Number self) => self.Asinh;
        [MethodImpl(AggressiveInlining)] public static Angle Asinh(this float self) => ((Number)self).Asinh;
        [MethodImpl(AggressiveInlining)] public static Angle Atan(this Number self) => self.Atan;
        [MethodImpl(AggressiveInlining)] public static Angle Atan(this float self) => ((Number)self).Atan;
        [MethodImpl(AggressiveInlining)] public static Angle Atan2(this Number self, Number x) => self.Atan2(x);
        [MethodImpl(AggressiveInlining)] public static Angle Atan2(this float self, Number x) => ((Number)self).Atan2(x);
        [MethodImpl(AggressiveInlining)] public static Angle Atanh(this Number self) => self.Atanh;
        [MethodImpl(AggressiveInlining)] public static Angle Atanh(this float self) => ((Number)self).Atanh;
        [MethodImpl(AggressiveInlining)] public static Number BitDecrement(this Number self) => self.BitDecrement;
        [MethodImpl(AggressiveInlining)] public static Number BitDecrement(this float self) => ((Number)self).BitDecrement;
        [MethodImpl(AggressiveInlining)] public static Number BitIncrement(this Number self) => self.BitIncrement;
        [MethodImpl(AggressiveInlining)] public static Number BitIncrement(this float self) => ((Number)self).BitIncrement;
        [MethodImpl(AggressiveInlining)] public static Number Cbrt(this Number self) => self.Cbrt;
        [MethodImpl(AggressiveInlining)] public static Number Cbrt(this float self) => ((Number)self).Cbrt;
        [MethodImpl(AggressiveInlining)] public static Number Ceiling(this Number self) => self.Ceiling;
        [MethodImpl(AggressiveInlining)] public static Number Ceiling(this float self) => ((Number)self).Ceiling;
        [MethodImpl(AggressiveInlining)] public static Number Clamp(this Number self, Number min, Number max) => self.Clamp(min, max);
        [MethodImpl(AggressiveInlining)] public static Number Clamp(this float self, Number min, Number max) => ((Number)self).Clamp(min, max);
        [MethodImpl(AggressiveInlining)] public static Number CopySign(this Number self, Number y) => self.CopySign(y);
        [MethodImpl(AggressiveInlining)] public static Number CopySign(this float self, Number y) => ((Number)self).CopySign(y);
        [MethodImpl(AggressiveInlining)] public static Number Exp(this Number self) => self.Exp;
        [MethodImpl(AggressiveInlining)] public static Number Exp(this float self) => ((Number)self).Exp;
        [MethodImpl(AggressiveInlining)] public static Number Floor(this Number self) => self.Floor;
        [MethodImpl(AggressiveInlining)] public static Number Floor(this float self) => ((Number)self).Floor;
        [MethodImpl(AggressiveInlining)] public static Number FusedMultiplyAdd(this Number self, Number y, Number z) => self.FusedMultiplyAdd(y, z);
        [MethodImpl(AggressiveInlining)] public static Number FusedMultiplyAdd(this float self, Number y, Number z) => ((Number)self).FusedMultiplyAdd(y, z);
        [MethodImpl(AggressiveInlining)] public static Number ILogB(this Number self) => self.ILogB;
        [MethodImpl(AggressiveInlining)] public static Number ILogB(this float self) => ((Number)self).ILogB;
        [MethodImpl(AggressiveInlining)] public static Number IEEERemainder(this Number self, Number y) => self.IEEERemainder(y);
        [MethodImpl(AggressiveInlining)] public static Number IEEERemainder(this float self, Number y) => ((Number)self).IEEERemainder(y);
        [MethodImpl(AggressiveInlining)] public static Number Log(this Number self, Number newBase) => self.Log(newBase);
        [MethodImpl(AggressiveInlining)] public static Number Log(this float self, Number newBase) => ((Number)self).Log(newBase);
        [MethodImpl(AggressiveInlining)] public static Number Log10(this Number self) => self.Log10;
        [MethodImpl(AggressiveInlining)] public static Number Log10(this float self) => ((Number)self).Log10;
        [MethodImpl(AggressiveInlining)] public static Number Log2(this Number self) => self.Log2;
        [MethodImpl(AggressiveInlining)] public static Number Log2(this float self) => ((Number)self).Log2;
        [MethodImpl(AggressiveInlining)] public static Number Min(this Number self, Number other) => self.Min(other);
        [MethodImpl(AggressiveInlining)] public static Number Min(this float self, Number other) => ((Number)self).Min(other);
        [MethodImpl(AggressiveInlining)] public static Number MinMagnitude(this Number self, Number other) => self.MinMagnitude(other);
        [MethodImpl(AggressiveInlining)] public static Number MinMagnitude(this float self, Number other) => ((Number)self).MinMagnitude(other);
        [MethodImpl(AggressiveInlining)] public static Number Max(this Number self, Number other) => self.Max(other);
        [MethodImpl(AggressiveInlining)] public static Number Max(this float self, Number other) => ((Number)self).Max(other);
        [MethodImpl(AggressiveInlining)] public static Number MaxMagnitude(this Number self, Number other) => self.MaxMagnitude(other);
        [MethodImpl(AggressiveInlining)] public static Number MaxMagnitude(this float self, Number other) => ((Number)self).MaxMagnitude(other);
        [MethodImpl(AggressiveInlining)] public static Number NaturalLog(this Number self) => self.NaturalLog;
        [MethodImpl(AggressiveInlining)] public static Number NaturalLog(this float self) => ((Number)self).NaturalLog;
        [MethodImpl(AggressiveInlining)] public static Number Pow(this Number self, Number power) => self.Pow(power);
        [MethodImpl(AggressiveInlining)] public static Number Pow(this float self, Number power) => ((Number)self).Pow(power);
        [MethodImpl(AggressiveInlining)] public static Number Reciprocal(this Number self) => self.Reciprocal;
        [MethodImpl(AggressiveInlining)] public static Number Reciprocal(this float self) => ((Number)self).Reciprocal;
        [MethodImpl(AggressiveInlining)] public static Number ReciprocalEstimate(this Number self) => self.ReciprocalEstimate;
        [MethodImpl(AggressiveInlining)] public static Number ReciprocalEstimate(this float self) => ((Number)self).ReciprocalEstimate;
        [MethodImpl(AggressiveInlining)] public static Number ReciprocalSqrtEstimate(this Number self) => self.ReciprocalSqrtEstimate;
        [MethodImpl(AggressiveInlining)] public static Number ReciprocalSqrtEstimate(this float self) => ((Number)self).ReciprocalSqrtEstimate;
        [MethodImpl(AggressiveInlining)] public static Number Round(this Number self, Integer digits) => self.Round(digits);
        [MethodImpl(AggressiveInlining)] public static Number Round(this float self, Integer digits) => ((Number)self).Round(digits);
        [MethodImpl(AggressiveInlining)] public static Number RoundAwayFromZero(this Number self, Integer digits) => self.RoundAwayFromZero(digits);
        [MethodImpl(AggressiveInlining)] public static Number RoundAwayFromZero(this float self, Integer digits) => ((Number)self).RoundAwayFromZero(digits);
        [MethodImpl(AggressiveInlining)] public static Number RoundToZero(this Number self, Integer digits) => self.RoundToZero(digits);
        [MethodImpl(AggressiveInlining)] public static Number RoundToZero(this float self, Integer digits) => ((Number)self).RoundToZero(digits);
        [MethodImpl(AggressiveInlining)] public static Number ScaleB(this Number self, Integer n) => self.ScaleB(n);
        [MethodImpl(AggressiveInlining)] public static Number ScaleB(this float self, Integer n) => ((Number)self).ScaleB(n);
        [MethodImpl(AggressiveInlining)] public static Integer Sign(this Number self) => self.Sign;
        [MethodImpl(AggressiveInlining)] public static Integer Sign(this float self) => ((Number)self).Sign;
        [MethodImpl(AggressiveInlining)] public static Number Sqrt(this Number self) => self.Sqrt;
        [MethodImpl(AggressiveInlining)] public static Number Sqrt(this float self) => ((Number)self).Sqrt;
        [MethodImpl(AggressiveInlining)] public static Number Square(this Number self) => self.Square;
        [MethodImpl(AggressiveInlining)] public static Number Square(this float self) => ((Number)self).Square;
        [MethodImpl(AggressiveInlining)] public static Number Truncate(this Number self) => self.Truncate;
        [MethodImpl(AggressiveInlining)] public static Number Truncate(this float self) => ((Number)self).Truncate;
        [MethodImpl(AggressiveInlining)] public static Number Add(this Number a, Number b) => a.Add(b);
        [MethodImpl(AggressiveInlining)] public static Number Add(this float a, Number b) => ((Number)a).Add(b);
        [MethodImpl(AggressiveInlining)] public static Number Subtract(this Number a, Number b) => a.Subtract(b);
        [MethodImpl(AggressiveInlining)] public static Number Subtract(this float a, Number b) => ((Number)a).Subtract(b);
        [MethodImpl(AggressiveInlining)] public static Number Multiply(this Number a, Number b) => a.Multiply(b);
        [MethodImpl(AggressiveInlining)] public static Number Multiply(this float a, Number b) => ((Number)a).Multiply(b);
        [MethodImpl(AggressiveInlining)] public static Number Divide(this Number a, Number b) => a.Divide(b);
        [MethodImpl(AggressiveInlining)] public static Number Divide(this float a, Number b) => ((Number)a).Divide(b);
        [MethodImpl(AggressiveInlining)] public static Number Negative(this Number n) => n.Negative;
        [MethodImpl(AggressiveInlining)] public static Number Negative(this float n) => ((Number)n).Negative;
        [MethodImpl(AggressiveInlining)] public static Boolean LessThan(this Number a, Number b) => a.LessThan(b);
        [MethodImpl(AggressiveInlining)] public static Boolean LessThan(this float a, Number b) => ((Number)a).LessThan(b);
        [MethodImpl(AggressiveInlining)] public static Boolean LessThanOrEquals(this Number a, Number b) => a.LessThanOrEquals(b);
        [MethodImpl(AggressiveInlining)] public static Boolean LessThanOrEquals(this float a, Number b) => ((Number)a).LessThanOrEquals(b);
        [MethodImpl(AggressiveInlining)] public static Boolean GreaterThan(this Number a, Number b) => a.GreaterThan(b);
        [MethodImpl(AggressiveInlining)] public static Boolean GreaterThan(this float a, Number b) => ((Number)a).GreaterThan(b);
        [MethodImpl(AggressiveInlining)] public static Boolean GreaterThanOrEquals(this Number a, Number b) => a.GreaterThanOrEquals(b);
        [MethodImpl(AggressiveInlining)] public static Boolean GreaterThanOrEquals(this float a, Number b) => ((Number)a).GreaterThanOrEquals(b);
        [MethodImpl(AggressiveInlining)] public static Integer CompareTo(this Number self, Number other) => self.CompareTo(other);
        [MethodImpl(AggressiveInlining)] public static Integer CompareTo(this float self, Number other) => ((Number)self).CompareTo(other);
        [MethodImpl(AggressiveInlining)] public static Angle Multiply(this Number x, Angle a) => x.Multiply(a);
        [MethodImpl(AggressiveInlining)] public static Angle Multiply(this float x, Angle a) => ((Number)x).Multiply(a);
        [MethodImpl(AggressiveInlining)] public static Translation3D TranslationX(this float x) => ((Number)x).TranslationX;
        [MethodImpl(AggressiveInlining)] public static Translation3D TranslationY(this float x) => ((Number)x).TranslationY;
        [MethodImpl(AggressiveInlining)] public static Translation3D TranslationZ(this float x) => ((Number)x).TranslationZ;
        [MethodImpl(AggressiveInlining)] public static Scaling3D UniformScaling3D(this float x) => ((Number)x).UniformScaling3D;
        [MethodImpl(AggressiveInlining)] public static Vector2 Vector2(this float s) => ((Number)s).Vector2;
        [MethodImpl(AggressiveInlining)] public static Vector2 XVector2(this float n) => ((Number)n).XVector2;
        [MethodImpl(AggressiveInlining)] public static Vector2 YVector2(this float n) => ((Number)n).YVector2;
        [MethodImpl(AggressiveInlining)] public static Vector3 Vector3(this float s) => ((Number)s).Vector3;
        [MethodImpl(AggressiveInlining)] public static Vector3 XVector3(this float n) => ((Number)n).XVector3;
        [MethodImpl(AggressiveInlining)] public static Vector3 YVector3(this float n) => ((Number)n).YVector3;
        [MethodImpl(AggressiveInlining)] public static Vector3 ZVector3(this float n) => ((Number)n).ZVector3;
        [MethodImpl(AggressiveInlining)] public static Vector4 Vector4(this float s) => ((Number)s).Vector4;
        [MethodImpl(AggressiveInlining)] public static Vector4 XVector4(this float n) => ((Number)n).XVector4;
        [MethodImpl(AggressiveInlining)] public static Vector4 YVector4(this float n) => ((Number)n).YVector4;
        [MethodImpl(AggressiveInlining)] public static Vector4 ZVector4(this float n) => ((Number)n).ZVector4;
        [MethodImpl(AggressiveInlining)] public static Vector4 WVector4(this float n) => ((Number)n).WVector4;
        [MethodImpl(AggressiveInlining)] public static Vector8 Vector8(this float s) => ((Number)s).Vector8;
        [MethodImpl(AggressiveInlining)] public static IReadOnlyList<Number> Sample(this float a, Number b, Integer n) => ((Number)a).Sample(b, n);
        [MethodImpl(AggressiveInlining)] public static Number Half(this float x) => ((Number)x).Half;
        [MethodImpl(AggressiveInlining)] public static Number Quarter(this float x) => ((Number)x).Quarter;
        [MethodImpl(AggressiveInlining)] public static Number Eight(this float x) => ((Number)x).Eight;
        [MethodImpl(AggressiveInlining)] public static Number Sixteenth(this float x) => ((Number)x).Sixteenth;
        [MethodImpl(AggressiveInlining)] public static Number Tenth(this float x) => ((Number)x).Tenth;
        [MethodImpl(AggressiveInlining)] public static Number Twice(this float x) => ((Number)x).Twice;
        [MethodImpl(AggressiveInlining)] public static Number Hundred(this float x) => ((Number)x).Hundred;
        [MethodImpl(AggressiveInlining)] public static Number Thousand(this float x) => ((Number)x).Thousand;
        [MethodImpl(AggressiveInlining)] public static Number Million(this float x) => ((Number)x).Million;
        [MethodImpl(AggressiveInlining)] public static Number Billion(this float x) => ((Number)x).Billion;
        [MethodImpl(AggressiveInlining)] public static Number Hundredth(this float x) => ((Number)x).Hundredth;
        [MethodImpl(AggressiveInlining)] public static Number Thousandth(this float x) => ((Number)x).Thousandth;
        [MethodImpl(AggressiveInlining)] public static Number Millionth(this float x) => ((Number)x).Millionth;
        [MethodImpl(AggressiveInlining)] public static Number Billionth(this float x) => ((Number)x).Billionth;
        [MethodImpl(AggressiveInlining)] public static Number Lesser(this float a, Number b) => ((Number)a).Lesser(b);
        [MethodImpl(AggressiveInlining)] public static Number Greater(this float a, Number b) => ((Number)a).Greater(b);
    }
}
