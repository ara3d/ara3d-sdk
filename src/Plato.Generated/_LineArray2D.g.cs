// Autogenerated file: DO NOT EDIT
// Created on 2025-06-04 10:07:55 AM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;
using Ara3D.Collections;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct LineArray2D: ILineArray2D<LineArray2D>
    {
        // Fields
        [DataMember] public readonly IReadOnlyList<Line2D> Lines;

        // With functions 
        [MethodImpl(AggressiveInlining)] public LineArray2D WithLines(IReadOnlyList<Line2D> lines) => new LineArray2D(lines);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public LineArray2D(IReadOnlyList<Line2D> lines) { Lines = lines; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static LineArray2D Create(IReadOnlyList<Line2D> lines) => new LineArray2D(lines);

        // Static default implementation
        public static readonly LineArray2D Default = default;

        // Implicit converters to/from single field

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(LineArray2D other) => Lines.Equals(other.Lines);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(LineArray2D other) => !Lines.Equals(other.Lines);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is LineArray2D other ? Equals(other).Value : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Lines);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Lines\" = {Lines} }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // Implemented interface functions
        [MethodImpl(AggressiveInlining)] public LineArray2D Deform(System.Func<Point2D, Point2D> f){
            var _var108 = f;
            return new LineArray2D(this.Lines.Map((l)  => l.Deform(_var108)));
        }

public IReadOnlyList<Point2D> Points { [MethodImpl(AggressiveInlining)] get  => this.Lines.FlatMap((x)  => x.Points); } 
public Integer PrimitiveSize { [MethodImpl(AggressiveInlining)] get  => ((Integer)2); } 

        // Unimplemented interface functions
        public Integer NumPrimitives => throw new NotImplementedException();
public IReadOnlyList<Line2D> Primitives => throw new NotImplementedException();
}
    // Extension methods for the type
    public static partial class Extensions
    {
        [MethodImpl(AggressiveInlining)] public static Integer NumPrimitives(this LineArray2D x) => x.NumPrimitives;
        [MethodImpl(AggressiveInlining)] public static IReadOnlyList<Line2D> Primitives(this LineArray2D x) => x.Primitives;
    }
}
