// Autogenerated file: DO NOT EDIT
// Created on 2025-06-04 10:07:55 AM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;
using Ara3D.Collections;

namespace Ara3D.Geometry
{
    [StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct Vector4: IVector<Vector4>
    {
        // Static factory function
        [MethodImpl(AggressiveInlining)] public static Vector4 Create(Number x, Number y, Number z, Number w) => new Vector4(x, y, z, w);

        // Static default implementation
        public static readonly Vector4 Default = default;

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (Number, Number, Number, Number)(Vector4 self) => (self.X, self.Y, self.Z, self.W);
        [MethodImpl(AggressiveInlining)] public static implicit operator Vector4((Number, Number, Number, Number) value) => new Vector4(value.Item1, value.Item2, value.Item3, value.Item4);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out Number x, out Number y, out Number z, out Number w) { x = X; y = Y; z = Z; w = W;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(Vector4 other) => Value.Equals(other.Value);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Vector4 other) => !Value.Equals(other.Value);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Vector4 other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public static Boolean operator==(Vector4 a, Vector4 b) => a.Equals(b);
        [MethodImpl(AggressiveInlining)] public static Boolean operator!=(Vector4 a, Vector4 b) => !a.Equals(b);
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Value.GetHashCode();
        [MethodImpl(AggressiveInlining)] public override string ToString() => Value.ToString();

        // Explicit implementation of interfaces by forwarding properties to fields

        // IArrayLike predefined functions
        public Integer NumComponents { [MethodImpl(AggressiveInlining)] get => 4; }
        public IReadOnlyList<Number> Components { [MethodImpl(AggressiveInlining)] get => Intrinsics.MakeArray<Number>(X, Y, Z, W); }
        [MethodImpl(AggressiveInlining)] public static Vector4 CreateFromComponents(IReadOnlyList<Number> numbers) => new Vector4(numbers[0], numbers[1], numbers[2], numbers[3]);

        [MethodImpl(AggressiveInlining)] public static Vector4 CreateFromComponent(Number x) => new Vector4(x, x, x, x);

        // Implemented interface functions
        [MethodImpl(AggressiveInlining)] public Vector4 Add(Vector4 right) => this + right;
        [MethodImpl(AggressiveInlining)] public Vector4 Subtract(Vector4 right) => this - right;
        [MethodImpl(AggressiveInlining)] public Vector4 Multiply(Vector4 right) => this * right;
        [MethodImpl(AggressiveInlining)] public Vector4 Multiply(Number scalar) => this * scalar;
        [MethodImpl(AggressiveInlining)] public Vector4 Divide(Vector4 right) => this / right;
        [MethodImpl(AggressiveInlining)] public Vector4 Divide(Number scalar) => this / scalar;
        public Vector4 Negative { [MethodImpl(AggressiveInlining)] get => -this; }
        public Vector3 XYZ { [MethodImpl(AggressiveInlining)] get  => (this.X, this.Y, this.Z); } 
public static Vector4 UnitX { [MethodImpl(AggressiveInlining)] get  => (((Number)1), ((Number)0), ((Number)0), ((Number)0)); } 
public static Vector4 UnitY { [MethodImpl(AggressiveInlining)] get  => (((Number)0), ((Number)1), ((Number)0), ((Number)0)); } 
public static Vector4 UnitZ { [MethodImpl(AggressiveInlining)] get  => (((Number)0), ((Number)0), ((Number)1), ((Number)0)); } 
public static Vector4 UnitW { [MethodImpl(AggressiveInlining)] get  => (((Number)0), ((Number)0), ((Number)0), ((Number)1)); } 
[MethodImpl(AggressiveInlining)] public Vector8 Vector8(Vector4 v2) => (this.X, this.Y, this.Z, this.W, v2.X, v2.Y, v2.Z, v2.W);
[MethodImpl(AggressiveInlining)] public Vector4 Reflect(Vector4 normal) => this.Subtract(normal.Multiply(this.Dot(normal).Multiply(((Number)2))));
[MethodImpl(AggressiveInlining)] public Vector4 Project(Vector4 other) => other.Multiply(this.Dot(other));
[MethodImpl(AggressiveInlining)] public Angle Angle(Vector4 b) => this.Dot(b).Divide(this.Magnitude.Multiply(b.Magnitude)).Acos;
[MethodImpl(AggressiveInlining)] public Boolean IsParallel(Vector4 b) => this.Dot(b).Abs.GreaterThanOrEquals(((Number)1).Subtract(Constants.Epsilon));
public Vector4 PlusOne { [MethodImpl(AggressiveInlining)] get  => this.Add(One); } 
public Vector4 MinusOne { [MethodImpl(AggressiveInlining)] get  => this.Subtract(One); } 
// AMBIGUOUS FUNCTIONS 2
        /* Vectors_21.FromOne(x: IVector): IVector [Library]; */
        /* Core_7.FromOne(x: IVectorLike): IVectorLike [Library]; */
        public Vector4 FromOne { [MethodImpl(AggressiveInlining)] get  => this.Add(One).Negative; } 
[MethodImpl(AggressiveInlining)] public Vector4 Barycentric(Vector4 v2, Vector4 v3, Vector2 uv) => this.Add(v2.Subtract(this)).Multiply(uv.X).Add(v3.Subtract(this).Multiply(uv.Y));
[MethodImpl(AggressiveInlining)] public Vector4 Linear(Vector4 b, Number x) => this.Multiply(x).Add(b);
[MethodImpl(AggressiveInlining)] public Vector4 Quadratic(Vector4 b, Vector4 c, Number x) => this.Multiply(x.Sqr).Add(b.Multiply(x).Add(c));
[MethodImpl(AggressiveInlining)] public Vector4 Cubic(Vector4 b, Vector4 c, Vector4 d, Number x) => this.Multiply(x.Pow3).Add(b.Multiply(x.Sqr).Add(c.Multiply(x).Add(d)));
[MethodImpl(AggressiveInlining)] public Vector4 Quartic(Vector4 b, Vector4 c, Vector4 d, Vector4 e, Number x) => this.Multiply(x.Pow4).Add(b.Multiply(x.Pow3).Add(c.Multiply(x.Sqr).Add(d.Multiply(x).Add(e))));
[MethodImpl(AggressiveInlining)] public Vector4 LinearDerivative(Vector4 b, Number x) => this;
[MethodImpl(AggressiveInlining)] public Vector4 LinearSecondDerivative(Vector4 b, Number x) => default;
[MethodImpl(AggressiveInlining)] public Vector4 QuadraticDerivative(Vector4 b, Vector4 c, Number x) => this.Multiply(((Number)2)).Multiply(x).Add(b);
[MethodImpl(AggressiveInlining)] public Vector4 QuadraticSecondDerivative(Vector4 b, Vector4 c, Number x) => this.Multiply(((Number)2));
[MethodImpl(AggressiveInlining)] public Vector4 CubicDerivative(Vector4 b, Vector4 c, Vector4 d, Number x) => this.Multiply(((Number)3)).Multiply(x.Sqr).Add(b.Multiply(((Number)2)).Multiply(x).Add(c));
[MethodImpl(AggressiveInlining)] public Vector4 CubicSecondDerivative(Vector4 b, Vector4 c, Vector4 d, Number x) => this.Multiply(((Number)6)).Multiply(x).Add(b.Multiply(((Number)2)));
[MethodImpl(AggressiveInlining)] public Vector4 QuarticDerivative(Vector4 b, Vector4 c, Vector4 d, Vector4 e, Vector4 x) => this.Multiply(((Number)4)).Multiply(x.Pow3).Add(b.Multiply(((Number)3)).Multiply(x.Sqr).Add(c.Multiply(((Number)2)).Multiply(x).Add(d)));
[MethodImpl(AggressiveInlining)] public Vector4 QuarticSecondDerivative(Vector4 b, Vector4 c, Vector4 d, Vector4 e, Number x) => this.Multiply(((Number)12)).Multiply(x.Sqr).Add(b.Multiply(((Number)6)).Multiply(x).Add(c.Multiply(((Number)2))));
[MethodImpl(AggressiveInlining)] public Vector4 CubicBezier(Vector4 b, Vector4 c, Vector4 d, Number t) => this.Multiply(((Number)1).Subtract(t).Pow3).Add(b.Multiply(((Number)3).Multiply(((Number)1).Subtract(t).Sqr.Multiply(t))).Add(c.Multiply(((Number)3).Multiply(((Number)1).Subtract(t).Multiply(t.Sqr))).Add(d.Multiply(t.Pow3))));
[MethodImpl(AggressiveInlining)] public Vector4 CubicBezierDerivative(Vector4 b, Vector4 c, Vector4 d, Number t) => b.Subtract(this).Multiply(((Number)3).Multiply(((Number)1).Subtract(t).Sqr)).Add(c.Subtract(b).Multiply(((Number)6).Multiply(((Number)1).Subtract(t).Multiply(t))).Add(d.Subtract(c).Multiply(((Number)3).Multiply(t.Sqr))));
[MethodImpl(AggressiveInlining)] public Vector4 CubicBezierSecondDerivative(Vector4 b, Vector4 c, Vector4 d, Number t) => c.Subtract(b.Multiply(((Number)2)).Add(this)).Multiply(((Number)6).Multiply(((Number)1).Subtract(t))).Add(d.Subtract(c.Multiply(((Number)2)).Add(b)).Multiply(((Number)6).Multiply(t)));
[MethodImpl(AggressiveInlining)] public Vector4 QuadraticBezier(Vector4 b, Vector4 c, Number t) => this.Multiply(((Number)1).Subtract(t).Sqr).Add(b.Multiply(((Number)2).Multiply(((Number)1).Subtract(t).Multiply(t))).Add(c.Multiply(t.Sqr)));
[MethodImpl(AggressiveInlining)] public Vector4 QuadraticBezierDerivative(Vector4 b, Vector4 c, Number t) => b.Subtract(this).Multiply(((Number)2).Multiply(((Number)1).Subtract(t))).Add(c.Subtract(b).Multiply(((Number)2).Multiply(t)));
[MethodImpl(AggressiveInlining)] public Vector4 QuadraticBezierSecondDerivative(Vector4 b, Vector4 c, Number t) => ((Number)2).Multiply(this.Subtract(b.Multiply(((Number)2)).Add(c)));
[MethodImpl(AggressiveInlining)] public Vector4 Hermite(Vector4 p1, Vector4 m0, Vector4 m1, Number t) => this.Multiply(((Number)2).Multiply(t.Pow3).Subtract(((Number)3).Multiply(t.Sqr).Add(((Number)1)))).Add(m0.Multiply(t.Pow3.Subtract(((Number)2).Multiply(t.Sqr).Add(t))).Add(p1.Multiply(((Number)2).Multiply(t.Pow3).Add(((Number)3).Multiply(t.Sqr)).Negative).Add(m1.Multiply(t.Pow3.Subtract(t.Sqr)))));
[MethodImpl(AggressiveInlining)] public Vector4 HermiteDerivative(Vector4 p1, Vector4 m0, Vector4 m1, Number t) => this.Multiply(((Number)6).Multiply(t.Sqr).Subtract(((Number)6).Multiply(t))).Add(m0.Multiply(((Number)3).Multiply(t.Sqr).Subtract(((Number)4).Multiply(t).Add(((Number)1)))).Add(p1.Multiply(((Number)6).Multiply(t.Sqr).Add(((Number)6).Multiply(t)).Negative).Add(m1.Multiply(((Number)3).Multiply(t.Sqr).Subtract(((Number)2).Multiply(t))))));
[MethodImpl(AggressiveInlining)] public Vector4 CatmullRom(Vector4 p1, Vector4 p2, Vector4 p3, Number t) => ((Number)0.5).Multiply(p1.Multiply(((Number)2)).Add(p2.Subtract(this).Multiply(t).Add(this.Multiply(((Number)2)).Subtract(p1.Multiply(((Number)5)).Add(p2.Multiply(((Number)4)).Subtract(p3))).Multiply(t.Sqr).Add(this.Add(p1.Multiply(((Number)3)).Subtract(p2.Multiply(((Number)3)).Add(p3))).Negative.Multiply(t.Pow3)))));
[MethodImpl(AggressiveInlining)] public Vector4 CatmullRomDerivative(Vector4 p1, Vector4 p2, Vector4 p3, Number t) => ((Number)0.5).Multiply(p2.Subtract(this).Add(((Number)2).Multiply(this.Multiply(((Number)2)).Subtract(p1.Multiply(((Number)5)).Add(p2.Multiply(((Number)4)).Subtract(p3))).Multiply(t)).Add(((Number)3).Multiply(this.Add(p1.Multiply(((Number)3)).Subtract(p2.Multiply(((Number)3)).Add(p3))).Negative.Multiply(t.Sqr)))));
public Vector4 SmoothStep { [MethodImpl(AggressiveInlining)] get  => this.Sqr.Multiply(this.Twice.Add(((Number)3)).Negative); } 
public Vector4 SmootherStep { [MethodImpl(AggressiveInlining)] get  => this.Pow3.Multiply(this.Multiply(((Number)6)).Subtract(((Number)15))).Add(((Number)10)); } 
public static Vector4 Zero { [MethodImpl(AggressiveInlining)] get  => Vector4.CreateFromComponent(((Number)0)); } 
public static Vector4 One { [MethodImpl(AggressiveInlining)] get  => Vector4.CreateFromComponent(((Number)1)); } 
public static Vector4 MinValue { [MethodImpl(AggressiveInlining)] get  => Vector4.CreateFromComponent(Number.MinValue); } 
public static Vector4 MaxValue { [MethodImpl(AggressiveInlining)] get  => Vector4.CreateFromComponent(Number.MaxValue); } 
[MethodImpl(AggressiveInlining)] public Number Reduce(Number initial, System.Func<Number, Number, Number> f) => this.Components.Reduce(initial, f);
public Number MinComponent { [MethodImpl(AggressiveInlining)] get  => this.Reduce(this[((Integer)0)], (a, b)  => a.Min(b)); } 
public Number MaxComponent { [MethodImpl(AggressiveInlining)] get  => this.Reduce(this[((Integer)0)], (a, b)  => a.Max(b)); } 
public Number SumComponents { [MethodImpl(AggressiveInlining)] get  => this.Reduce(((Number)0), (a, b)  => a.Add(b)); } 
public Number SumSqrComponents { [MethodImpl(AggressiveInlining)] get  => this.Reduce(((Number)0), (a, b)  => a.Add(b.Multiply(b))); } 
public Number AvgComponent { [MethodImpl(AggressiveInlining)] get  => this.SumComponents.Divide(this.NumComponents); } 
public Number Magnitude { [MethodImpl(AggressiveInlining)] get  => this.MagnitudeSquared.Sqrt; } 
public Number MagnitudeSquared { [MethodImpl(AggressiveInlining)] get  => this.SumSqrComponents.Divide(this.NumComponents); } 
public Vector4 BitDecrement { [MethodImpl(AggressiveInlining)] get  => this.MapComponents((x)  => x.BitDecrement); } 
public Vector4 BitIncrement { [MethodImpl(AggressiveInlining)] get  => this.MapComponents((x)  => x.BitIncrement); } 
public Vector4 Cbrt { [MethodImpl(AggressiveInlining)] get  => this.MapComponents((x)  => x.Cbrt); } 
public Vector4 Ceiling { [MethodImpl(AggressiveInlining)] get  => this.MapComponents((x)  => x.Ceiling); } 
[MethodImpl(AggressiveInlining)] public Vector4 CopySign(Vector4 y) => this.ZipComponents(y, (a, b)  => a.CopySign(b));
public Vector4 Exp { [MethodImpl(AggressiveInlining)] get  => this.MapComponents((x)  => x.Exp); } 
public Vector4 Floor { [MethodImpl(AggressiveInlining)] get  => this.MapComponents((x)  => x.Floor); } 
[MethodImpl(AggressiveInlining)] public Vector4 FusedMultiplyAdd(Vector4 y, Vector4 z) => this.ZipComponents(y, z, (a, b, c)  => a.FusedMultiplyAdd(b, c));
public Vector4 ILogB { [MethodImpl(AggressiveInlining)] get  => this.MapComponents((x)  => x.ILogB); } 
[MethodImpl(AggressiveInlining)] public Vector4 IEEERemainder(Vector4 y) => this.ZipComponents(y, (a, b)  => a.IEEERemainder(b));
public Vector4 Log10 { [MethodImpl(AggressiveInlining)] get  => this.MapComponents((x)  => x.Log10); } 
public Vector4 Log2 { [MethodImpl(AggressiveInlining)] get  => this.MapComponents((x)  => x.Log2); } 
[MethodImpl(AggressiveInlining)] public Vector4 MinMagnitude(Vector4 other) => this.ZipComponents(other, (a, b)  => a.MinMagnitude(b));
[MethodImpl(AggressiveInlining)] public Vector4 MaxMagnitude(Vector4 other) => this.ZipComponents(other, (a, b)  => a.MaxMagnitude(b));
public Vector4 NaturalLog { [MethodImpl(AggressiveInlining)] get  => this.MapComponents((x)  => x.NaturalLog); } 
[MethodImpl(AggressiveInlining)] public Vector4 Pow(Vector4 power) => this.ZipComponents(power, (a, b)  => a.Pow(b));
public Vector4 Reciprocal { [MethodImpl(AggressiveInlining)] get  => this.MapComponents((x)  => x.Reciprocal); } 
public Vector4 ReciprocalEstimate { [MethodImpl(AggressiveInlining)] get  => this.MapComponents((x)  => x.ReciprocalEstimate); } 
public Vector4 ReciprocalSquareRootEstimate { [MethodImpl(AggressiveInlining)] get  => this.MapComponents((x)  => x.ReciprocalSquareRootEstimate); } 
[MethodImpl(AggressiveInlining)] public Vector4 RoundToZero(Integer digits){
            var _var155 = digits;
            return this.MapComponents((x)  => x.RoundToZero(_var155));
        }

[MethodImpl(AggressiveInlining)] public Vector4 ScaleB(Integer n){
            var _var156 = n;
            return this.MapComponents((x)  => x.ScaleB(_var156));
        }

[MethodImpl(AggressiveInlining)] public Boolean AlmostEqual(Vector4 y) => this.AllZipComponents(y, (a, b)  => a.AlmostEqual(b));
public Boolean AlmostZero { [MethodImpl(AggressiveInlining)] get  => this.AllComponents((x)  => x.AlmostZero); } 
// AMBIGUOUS FUNCTIONS 2
        /* Core_7.Average(x: IVectorLike,y: IVectorLike): IVectorLike [Library]; */
        /* Core_7.Average(a: IInterpolatable,b: IInterpolatable): IInterpolatable [Library]; */
        [MethodImpl(AggressiveInlining)] public Vector4 Average(Vector4 y) => this.Lerp(y, ((Number)0.5));
[MethodImpl(AggressiveInlining)] public Boolean Between(Vector4 a, Vector4 b) => this.AllZipComponents(a, b, (x1, a1, b1)  => x1.Between(a1, b1));
public Boolean Between01 { [MethodImpl(AggressiveInlining)] get  => this.AllComponents((x1)  => x1.Between01); } 
public Vector4 ClampZeroOne { [MethodImpl(AggressiveInlining)] get  => this.MapComponents((x1)  => x1.ClampZeroOne); } 
public Vector4 Fract { [MethodImpl(AggressiveInlining)] get  => this.MapComponents((x1)  => x1.Fract); } 
[MethodImpl(AggressiveInlining)] public Vector4 InversePow(Vector4 y) => this.ZipComponents(y, (x1, y1)  => x1.InversePow(y1));
[MethodImpl(AggressiveInlining)] public Vector4 Lerp(Vector4 b, Number t){
            var _var157 = t;
            return this.ZipComponents(b, (a1, b1)  => a1.Lerp(b1, _var157));
        }

[MethodImpl(AggressiveInlining)] public Vector4 MultiplyEpsilon(Vector4 y) => this.ZipComponents(y, (x1, y1)  => x1.MultiplyEpsilon(y1));
public Vector4 Pow2 { [MethodImpl(AggressiveInlining)] get  => this.MapComponents((x1)  => x1.Pow2); } 
public Vector4 Pow3 { [MethodImpl(AggressiveInlining)] get  => this.MapComponents((x1)  => x1.Pow3); } 
public Vector4 Pow4 { [MethodImpl(AggressiveInlining)] get  => this.MapComponents((x1)  => x1.Pow4); } 
public Vector4 Pow5 { [MethodImpl(AggressiveInlining)] get  => this.MapComponents((x1)  => x1.Pow5); } 
public Vector4 Sqr { [MethodImpl(AggressiveInlining)] get  => this.MapComponents((x1)  => x1.Sqr); } 
[MethodImpl(AggressiveInlining)] public IReadOnlyList<Vector4> Sample(Vector4 b, Integer n){
            var _var159 = b;
            {
                var _var158 = this;
                return n.LinearSpace.Map((i)  => _var158.Lerp(_var159, i));
            }
        }

public Vector4 Half { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)2)); } 
public Vector4 Quarter { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)4)); } 
public Vector4 Eight { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)8)); } 
public Vector4 Sixteenth { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)16)); } 
public Vector4 Tenth { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)10)); } 
public Vector4 Twice { [MethodImpl(AggressiveInlining)] get  => this.Multiply(((Number)2)); } 
public Vector4 Hundred { [MethodImpl(AggressiveInlining)] get  => this.Multiply(((Number)100)); } 
public Vector4 Thousand { [MethodImpl(AggressiveInlining)] get  => this.Multiply(((Number)1000)); } 
public Vector4 Million { [MethodImpl(AggressiveInlining)] get  => this.Thousand.Thousand; } 
public Vector4 Billion { [MethodImpl(AggressiveInlining)] get  => this.Thousand.Million; } 
public Vector4 Hundredth { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)100)); } 
public Vector4 Thousandth { [MethodImpl(AggressiveInlining)] get  => this.Divide(((Number)1000)); } 
public Vector4 Millionth { [MethodImpl(AggressiveInlining)] get  => this.Thousandth.Thousandth; } 
public Vector4 Billionth { [MethodImpl(AggressiveInlining)] get  => this.Thousandth.Millionth; } 
[MethodImpl(AggressiveInlining)] public Number At(Integer n) => this.Components[n];
public Number this[Integer n] { [MethodImpl(AggressiveInlining)]  get => At(n); }
        [MethodImpl(AggressiveInlining)] public Vector4 MapComponents(System.Func<Number, Number> f) => Vector4.CreateFromComponents(this.Components.Map(f));
[MethodImpl(AggressiveInlining)] public Vector4 ZipComponents(Vector4 b, System.Func<Number, Number, Number> f) => Vector4.CreateFromComponents(this.Components.Zip(b.Components, f));
[MethodImpl(AggressiveInlining)] public Vector4 ZipComponents(Vector4 b, Vector4 c, System.Func<Number, Number, Number, Number> f) => Vector4.CreateFromComponents(this.Components.Zip(b.Components, c.Components, f));
[MethodImpl(AggressiveInlining)] public Boolean AllZipComponents(Vector4 b, System.Func<Number, Number, Boolean> f) => this.Components.Zip(b.Components, f).All((x)  => x);
[MethodImpl(AggressiveInlining)] public Boolean AllZipComponents(Vector4 b, Vector4 c, System.Func<Number, Number, Number, Boolean> f) => this.Components.Zip(b.Components, c.Components, f).All((x)  => x);
[MethodImpl(AggressiveInlining)] public Boolean AnyZipComponents(Vector4 b, System.Func<Number, Number, Boolean> f) => this.Components.Zip(b.Components, f).Any((x)  => x);
[MethodImpl(AggressiveInlining)] public Boolean AnyZipComponents(Vector4 b, Vector4 c, System.Func<Number, Number, Number, Boolean> f) => this.Components.Zip(b.Components, c.Components, f).Any((x)  => x);
[MethodImpl(AggressiveInlining)] public Boolean AllComponents(System.Func<Number, Boolean> predicate) => this.Components.All(predicate);
[MethodImpl(AggressiveInlining)] public Boolean AnyComponent(System.Func<Number, Boolean> predicate) => this.Components.Any(predicate);

        // Unimplemented interface functions
        [MethodImpl(AggressiveInlining)] public Vector4 Modulo(Vector4 b) => this % b;
        [MethodImpl(AggressiveInlining)] public Vector4 Modulo(Number other) => this % other;
    }
    // Extension methods for the type
    public static partial class Extensions
    {
        [MethodImpl(AggressiveInlining)] public static Vector4 Modulo(this Vector4 a, Vector4 b) => a.Modulo(b);
        [MethodImpl(AggressiveInlining)] public static Vector4 Modulo(this System.Numerics.Vector4 a, Vector4 b) => ((Vector4)a).Modulo(b);
        [MethodImpl(AggressiveInlining)] public static Vector4 Modulo(this Vector4 self, Number other) => self.Modulo(other);
        [MethodImpl(AggressiveInlining)] public static Vector4 Modulo(this System.Numerics.Vector4 self, Number other) => ((Vector4)self).Modulo(other);
        [MethodImpl(AggressiveInlining)] public static Number X(this Vector4 self) => self.X;
        [MethodImpl(AggressiveInlining)] public static Number X(this System.Numerics.Vector4 self) => ((Vector4)self).X;
        [MethodImpl(AggressiveInlining)] public static Number Y(this Vector4 self) => self.Y;
        [MethodImpl(AggressiveInlining)] public static Number Y(this System.Numerics.Vector4 self) => ((Vector4)self).Y;
        [MethodImpl(AggressiveInlining)] public static Number Z(this Vector4 self) => self.Z;
        [MethodImpl(AggressiveInlining)] public static Number Z(this System.Numerics.Vector4 self) => ((Vector4)self).Z;
        [MethodImpl(AggressiveInlining)] public static Number W(this Vector4 self) => self.W;
        [MethodImpl(AggressiveInlining)] public static Number W(this System.Numerics.Vector4 self) => ((Vector4)self).W;
        [MethodImpl(AggressiveInlining)] public static Vector4 WithX(this Vector4 self, Number x) => self.WithX(x);
        [MethodImpl(AggressiveInlining)] public static Vector4 WithX(this System.Numerics.Vector4 self, Number x) => ((Vector4)self).WithX(x);
        [MethodImpl(AggressiveInlining)] public static Vector4 WithY(this Vector4 self, Number y) => self.WithY(y);
        [MethodImpl(AggressiveInlining)] public static Vector4 WithY(this System.Numerics.Vector4 self, Number y) => ((Vector4)self).WithY(y);
        [MethodImpl(AggressiveInlining)] public static Vector4 WithZ(this Vector4 self, Number z) => self.WithZ(z);
        [MethodImpl(AggressiveInlining)] public static Vector4 WithZ(this System.Numerics.Vector4 self, Number z) => ((Vector4)self).WithZ(z);
        [MethodImpl(AggressiveInlining)] public static Vector4 WithW(this Vector4 self, Number w) => self.WithW(w);
        [MethodImpl(AggressiveInlining)] public static Vector4 WithW(this System.Numerics.Vector4 self, Number w) => ((Vector4)self).WithW(w);
        [MethodImpl(AggressiveInlining)] public static Vector4 Normalize(this Vector4 self) => self.Normalize;
        [MethodImpl(AggressiveInlining)] public static Vector4 Normalize(this System.Numerics.Vector4 self) => ((Vector4)self).Normalize;
        [MethodImpl(AggressiveInlining)] public static Number Length(this Vector4 self) => self.Length;
        [MethodImpl(AggressiveInlining)] public static Number Length(this System.Numerics.Vector4 self) => ((Vector4)self).Length;
        [MethodImpl(AggressiveInlining)] public static Number LengthSquared(this Vector4 self) => self.LengthSquared;
        [MethodImpl(AggressiveInlining)] public static Number LengthSquared(this System.Numerics.Vector4 self) => ((Vector4)self).LengthSquared;
        [MethodImpl(AggressiveInlining)] public static Vector4 Abs(this Vector4 self) => self.Abs;
        [MethodImpl(AggressiveInlining)] public static Vector4 Abs(this System.Numerics.Vector4 self) => ((Vector4)self).Abs;
        [MethodImpl(AggressiveInlining)] public static Vector4 Sqrt(this Vector4 self) => self.Sqrt;
        [MethodImpl(AggressiveInlining)] public static Vector4 Sqrt(this System.Numerics.Vector4 self) => ((Vector4)self).Sqrt;
        [MethodImpl(AggressiveInlining)] public static Vector4 Add(this Vector4 left, Vector4 right) => left.Add(right);
        [MethodImpl(AggressiveInlining)] public static Vector4 Add(this System.Numerics.Vector4 left, Vector4 right) => ((Vector4)left).Add(right);
        [MethodImpl(AggressiveInlining)] public static Vector4 Subtract(this Vector4 left, Vector4 right) => left.Subtract(right);
        [MethodImpl(AggressiveInlining)] public static Vector4 Subtract(this System.Numerics.Vector4 left, Vector4 right) => ((Vector4)left).Subtract(right);
        [MethodImpl(AggressiveInlining)] public static Vector4 Multiply(this Vector4 left, Vector4 right) => left.Multiply(right);
        [MethodImpl(AggressiveInlining)] public static Vector4 Multiply(this System.Numerics.Vector4 left, Vector4 right) => ((Vector4)left).Multiply(right);
        [MethodImpl(AggressiveInlining)] public static Vector4 Multiply(this Vector4 left, Number scalar) => left.Multiply(scalar);
        [MethodImpl(AggressiveInlining)] public static Vector4 Multiply(this System.Numerics.Vector4 left, Number scalar) => ((Vector4)left).Multiply(scalar);
        [MethodImpl(AggressiveInlining)] public static Vector4 Divide(this Vector4 left, Vector4 right) => left.Divide(right);
        [MethodImpl(AggressiveInlining)] public static Vector4 Divide(this System.Numerics.Vector4 left, Vector4 right) => ((Vector4)left).Divide(right);
        [MethodImpl(AggressiveInlining)] public static Vector4 Divide(this Vector4 left, Number scalar) => left.Divide(scalar);
        [MethodImpl(AggressiveInlining)] public static Vector4 Divide(this System.Numerics.Vector4 left, Number scalar) => ((Vector4)left).Divide(scalar);
        [MethodImpl(AggressiveInlining)] public static Vector4 Negative(this Vector4 value) => value.Negative;
        [MethodImpl(AggressiveInlining)] public static Vector4 Negative(this System.Numerics.Vector4 value) => ((Vector4)value).Negative;
        [MethodImpl(AggressiveInlining)] public static Number Dot(this Vector4 self, Vector4 right) => self.Dot(right);
        [MethodImpl(AggressiveInlining)] public static Number Dot(this System.Numerics.Vector4 self, Vector4 right) => ((Vector4)self).Dot(right);
        [MethodImpl(AggressiveInlining)] public static Number Distance(this Vector4 self, Vector4 value2) => self.Distance(value2);
        [MethodImpl(AggressiveInlining)] public static Number Distance(this System.Numerics.Vector4 self, Vector4 value2) => ((Vector4)self).Distance(value2);
        [MethodImpl(AggressiveInlining)] public static Number DistanceSquared(this Vector4 self, Vector4 value2) => self.DistanceSquared(value2);
        [MethodImpl(AggressiveInlining)] public static Number DistanceSquared(this System.Numerics.Vector4 self, Vector4 value2) => ((Vector4)self).DistanceSquared(value2);
        [MethodImpl(AggressiveInlining)] public static Vector4 Clamp(this Vector4 self, Vector4 min, Vector4 max) => self.Clamp(min, max);
        [MethodImpl(AggressiveInlining)] public static Vector4 Clamp(this System.Numerics.Vector4 self, Vector4 min, Vector4 max) => ((Vector4)self).Clamp(min, max);
        [MethodImpl(AggressiveInlining)] public static Vector4 Transform(this Vector4 self, Matrix4x4 matrix) => self.Transform(matrix);
        [MethodImpl(AggressiveInlining)] public static Vector4 Transform(this System.Numerics.Vector4 self, Matrix4x4 matrix) => ((Vector4)self).Transform(matrix);
        [MethodImpl(AggressiveInlining)] public static Vector4 Transform(this Vector4 self, Quaternion rotation) => self.Transform(rotation);
        [MethodImpl(AggressiveInlining)] public static Vector4 Transform(this System.Numerics.Vector4 self, Quaternion rotation) => ((Vector4)self).Transform(rotation);
        [MethodImpl(AggressiveInlining)] public static Vector4 Max(this Vector4 self, Vector4 value2) => self.Max(value2);
        [MethodImpl(AggressiveInlining)] public static Vector4 Max(this System.Numerics.Vector4 self, Vector4 value2) => ((Vector4)self).Max(value2);
        [MethodImpl(AggressiveInlining)] public static Vector4 Min(this Vector4 self, Vector4 value2) => self.Min(value2);
        [MethodImpl(AggressiveInlining)] public static Vector4 Min(this System.Numerics.Vector4 self, Vector4 value2) => ((Vector4)self).Min(value2);
        [MethodImpl(AggressiveInlining)] public static Vector3 XYZ(this System.Numerics.Vector4 v) => ((Vector4)v).XYZ;
        [MethodImpl(AggressiveInlining)] public static Vector8 Vector8(this System.Numerics.Vector4 v1, Vector4 v2) => ((Vector4)v1).Vector8(v2);
        [MethodImpl(AggressiveInlining)] public static Vector4 Reflect(this System.Numerics.Vector4 v, Vector4 normal) => ((Vector4)v).Reflect(normal);
        [MethodImpl(AggressiveInlining)] public static Vector4 Project(this System.Numerics.Vector4 v, Vector4 other) => ((Vector4)v).Project(other);
        [MethodImpl(AggressiveInlining)] public static Angle Angle(this System.Numerics.Vector4 a, Vector4 b) => ((Vector4)a).Angle(b);
        [MethodImpl(AggressiveInlining)] public static Boolean IsParallel(this System.Numerics.Vector4 a, Vector4 b) => ((Vector4)a).IsParallel(b);
        [MethodImpl(AggressiveInlining)] public static Vector4 PlusOne(this System.Numerics.Vector4 x) => ((Vector4)x).PlusOne;
        [MethodImpl(AggressiveInlining)] public static Vector4 MinusOne(this System.Numerics.Vector4 x) => ((Vector4)x).MinusOne;
        [MethodImpl(AggressiveInlining)] public static Vector4 FromOne(this System.Numerics.Vector4 x) => ((Vector4)x).FromOne;
        [MethodImpl(AggressiveInlining)] public static Vector4 Barycentric(this System.Numerics.Vector4 v1, Vector4 v2, Vector4 v3, Vector2 uv) => ((Vector4)v1).Barycentric(v2, v3, uv);
        [MethodImpl(AggressiveInlining)] public static Vector4 Linear(this System.Numerics.Vector4 m, Vector4 b, Number x) => ((Vector4)m).Linear(b, x);
        [MethodImpl(AggressiveInlining)] public static Vector4 Quadratic(this System.Numerics.Vector4 a, Vector4 b, Vector4 c, Number x) => ((Vector4)a).Quadratic(b, c, x);
        [MethodImpl(AggressiveInlining)] public static Vector4 Cubic(this System.Numerics.Vector4 a, Vector4 b, Vector4 c, Vector4 d, Number x) => ((Vector4)a).Cubic(b, c, d, x);
        [MethodImpl(AggressiveInlining)] public static Vector4 Quartic(this System.Numerics.Vector4 a, Vector4 b, Vector4 c, Vector4 d, Vector4 e, Number x) => ((Vector4)a).Quartic(b, c, d, e, x);
        [MethodImpl(AggressiveInlining)] public static Vector4 LinearDerivative(this System.Numerics.Vector4 m, Vector4 b, Number x) => ((Vector4)m).LinearDerivative(b, x);
        [MethodImpl(AggressiveInlining)] public static Vector4 LinearSecondDerivative(this System.Numerics.Vector4 m, Vector4 b, Number x) => ((Vector4)m).LinearSecondDerivative(b, x);
        [MethodImpl(AggressiveInlining)] public static Vector4 QuadraticDerivative(this System.Numerics.Vector4 a, Vector4 b, Vector4 c, Number x) => ((Vector4)a).QuadraticDerivative(b, c, x);
        [MethodImpl(AggressiveInlining)] public static Vector4 QuadraticSecondDerivative(this System.Numerics.Vector4 a, Vector4 b, Vector4 c, Number x) => ((Vector4)a).QuadraticSecondDerivative(b, c, x);
        [MethodImpl(AggressiveInlining)] public static Vector4 CubicDerivative(this System.Numerics.Vector4 a, Vector4 b, Vector4 c, Vector4 d, Number x) => ((Vector4)a).CubicDerivative(b, c, d, x);
        [MethodImpl(AggressiveInlining)] public static Vector4 CubicSecondDerivative(this System.Numerics.Vector4 a, Vector4 b, Vector4 c, Vector4 d, Number x) => ((Vector4)a).CubicSecondDerivative(b, c, d, x);
        [MethodImpl(AggressiveInlining)] public static Vector4 QuarticDerivative(this System.Numerics.Vector4 a, Vector4 b, Vector4 c, Vector4 d, Vector4 e, Vector4 x) => ((Vector4)a).QuarticDerivative(b, c, d, e, x);
        [MethodImpl(AggressiveInlining)] public static Vector4 QuarticSecondDerivative(this System.Numerics.Vector4 a, Vector4 b, Vector4 c, Vector4 d, Vector4 e, Number x) => ((Vector4)a).QuarticSecondDerivative(b, c, d, e, x);
        [MethodImpl(AggressiveInlining)] public static Vector4 CubicBezier(this System.Numerics.Vector4 a, Vector4 b, Vector4 c, Vector4 d, Number t) => ((Vector4)a).CubicBezier(b, c, d, t);
        [MethodImpl(AggressiveInlining)] public static Vector4 CubicBezierDerivative(this System.Numerics.Vector4 a, Vector4 b, Vector4 c, Vector4 d, Number t) => ((Vector4)a).CubicBezierDerivative(b, c, d, t);
        [MethodImpl(AggressiveInlining)] public static Vector4 CubicBezierSecondDerivative(this System.Numerics.Vector4 a, Vector4 b, Vector4 c, Vector4 d, Number t) => ((Vector4)a).CubicBezierSecondDerivative(b, c, d, t);
        [MethodImpl(AggressiveInlining)] public static Vector4 QuadraticBezier(this System.Numerics.Vector4 a, Vector4 b, Vector4 c, Number t) => ((Vector4)a).QuadraticBezier(b, c, t);
        [MethodImpl(AggressiveInlining)] public static Vector4 QuadraticBezierDerivative(this System.Numerics.Vector4 a, Vector4 b, Vector4 c, Number t) => ((Vector4)a).QuadraticBezierDerivative(b, c, t);
        [MethodImpl(AggressiveInlining)] public static Vector4 QuadraticBezierSecondDerivative(this System.Numerics.Vector4 a, Vector4 b, Vector4 c, Number t) => ((Vector4)a).QuadraticBezierSecondDerivative(b, c, t);
        [MethodImpl(AggressiveInlining)] public static Vector4 Hermite(this System.Numerics.Vector4 p0, Vector4 p1, Vector4 m0, Vector4 m1, Number t) => ((Vector4)p0).Hermite(p1, m0, m1, t);
        [MethodImpl(AggressiveInlining)] public static Vector4 HermiteDerivative(this System.Numerics.Vector4 p0, Vector4 p1, Vector4 m0, Vector4 m1, Number t) => ((Vector4)p0).HermiteDerivative(p1, m0, m1, t);
        [MethodImpl(AggressiveInlining)] public static Vector4 CatmullRom(this System.Numerics.Vector4 p0, Vector4 p1, Vector4 p2, Vector4 p3, Number t) => ((Vector4)p0).CatmullRom(p1, p2, p3, t);
        [MethodImpl(AggressiveInlining)] public static Vector4 CatmullRomDerivative(this System.Numerics.Vector4 p0, Vector4 p1, Vector4 p2, Vector4 p3, Number t) => ((Vector4)p0).CatmullRomDerivative(p1, p2, p3, t);
        [MethodImpl(AggressiveInlining)] public static Vector4 SmoothStep(this System.Numerics.Vector4 x) => ((Vector4)x).SmoothStep;
        [MethodImpl(AggressiveInlining)] public static Vector4 SmootherStep(this System.Numerics.Vector4 x) => ((Vector4)x).SmootherStep;
        [MethodImpl(AggressiveInlining)] public static Number Reduce(this System.Numerics.Vector4 v, Number initial, System.Func<Number, Number, Number> f) => ((Vector4)v).Reduce(initial, f);
        [MethodImpl(AggressiveInlining)] public static Number MinComponent(this System.Numerics.Vector4 x) => ((Vector4)x).MinComponent;
        [MethodImpl(AggressiveInlining)] public static Number MaxComponent(this System.Numerics.Vector4 x) => ((Vector4)x).MaxComponent;
        [MethodImpl(AggressiveInlining)] public static Number SumComponents(this System.Numerics.Vector4 v) => ((Vector4)v).SumComponents;
        [MethodImpl(AggressiveInlining)] public static Number SumSqrComponents(this System.Numerics.Vector4 v) => ((Vector4)v).SumSqrComponents;
        [MethodImpl(AggressiveInlining)] public static Number AvgComponent(this System.Numerics.Vector4 v) => ((Vector4)v).AvgComponent;
        [MethodImpl(AggressiveInlining)] public static Number Magnitude(this System.Numerics.Vector4 v) => ((Vector4)v).Magnitude;
        [MethodImpl(AggressiveInlining)] public static Number MagnitudeSquared(this System.Numerics.Vector4 v) => ((Vector4)v).MagnitudeSquared;
        [MethodImpl(AggressiveInlining)] public static Vector4 BitDecrement(this System.Numerics.Vector4 self) => ((Vector4)self).BitDecrement;
        [MethodImpl(AggressiveInlining)] public static Vector4 BitIncrement(this System.Numerics.Vector4 self) => ((Vector4)self).BitIncrement;
        [MethodImpl(AggressiveInlining)] public static Vector4 Cbrt(this System.Numerics.Vector4 self) => ((Vector4)self).Cbrt;
        [MethodImpl(AggressiveInlining)] public static Vector4 Ceiling(this System.Numerics.Vector4 self) => ((Vector4)self).Ceiling;
        [MethodImpl(AggressiveInlining)] public static Vector4 CopySign(this System.Numerics.Vector4 self, Vector4 y) => ((Vector4)self).CopySign(y);
        [MethodImpl(AggressiveInlining)] public static Vector4 Exp(this System.Numerics.Vector4 self) => ((Vector4)self).Exp;
        [MethodImpl(AggressiveInlining)] public static Vector4 Floor(this System.Numerics.Vector4 self) => ((Vector4)self).Floor;
        [MethodImpl(AggressiveInlining)] public static Vector4 FusedMultiplyAdd(this System.Numerics.Vector4 self, Vector4 y, Vector4 z) => ((Vector4)self).FusedMultiplyAdd(y, z);
        [MethodImpl(AggressiveInlining)] public static Vector4 ILogB(this System.Numerics.Vector4 self) => ((Vector4)self).ILogB;
        [MethodImpl(AggressiveInlining)] public static Vector4 IEEERemainder(this System.Numerics.Vector4 self, Vector4 y) => ((Vector4)self).IEEERemainder(y);
        [MethodImpl(AggressiveInlining)] public static Vector4 Log10(this System.Numerics.Vector4 self) => ((Vector4)self).Log10;
        [MethodImpl(AggressiveInlining)] public static Vector4 Log2(this System.Numerics.Vector4 self) => ((Vector4)self).Log2;
        [MethodImpl(AggressiveInlining)] public static Vector4 MinMagnitude(this System.Numerics.Vector4 self, Vector4 other) => ((Vector4)self).MinMagnitude(other);
        [MethodImpl(AggressiveInlining)] public static Vector4 MaxMagnitude(this System.Numerics.Vector4 self, Vector4 other) => ((Vector4)self).MaxMagnitude(other);
        [MethodImpl(AggressiveInlining)] public static Vector4 NaturalLog(this System.Numerics.Vector4 self) => ((Vector4)self).NaturalLog;
        [MethodImpl(AggressiveInlining)] public static Vector4 Pow(this System.Numerics.Vector4 self, Vector4 power) => ((Vector4)self).Pow(power);
        [MethodImpl(AggressiveInlining)] public static Vector4 Reciprocal(this System.Numerics.Vector4 self) => ((Vector4)self).Reciprocal;
        [MethodImpl(AggressiveInlining)] public static Vector4 ReciprocalEstimate(this System.Numerics.Vector4 self) => ((Vector4)self).ReciprocalEstimate;
        [MethodImpl(AggressiveInlining)] public static Vector4 ReciprocalSquareRootEstimate(this System.Numerics.Vector4 self) => ((Vector4)self).ReciprocalSquareRootEstimate;
        [MethodImpl(AggressiveInlining)] public static Vector4 RoundToZero(this System.Numerics.Vector4 self, Integer digits) => ((Vector4)self).RoundToZero(digits);
        [MethodImpl(AggressiveInlining)] public static Vector4 ScaleB(this System.Numerics.Vector4 self, Integer n) => ((Vector4)self).ScaleB(n);
        [MethodImpl(AggressiveInlining)] public static Boolean AlmostEqual(this System.Numerics.Vector4 x, Vector4 y) => ((Vector4)x).AlmostEqual(y);
        [MethodImpl(AggressiveInlining)] public static Boolean AlmostZero(this System.Numerics.Vector4 x) => ((Vector4)x).AlmostZero;
        [MethodImpl(AggressiveInlining)] public static Vector4 Average(this System.Numerics.Vector4 x, Vector4 y) => ((Vector4)x).Average(y);
        [MethodImpl(AggressiveInlining)] public static Boolean Between(this System.Numerics.Vector4 x, Vector4 a, Vector4 b) => ((Vector4)x).Between(a, b);
        [MethodImpl(AggressiveInlining)] public static Boolean Between01(this System.Numerics.Vector4 x) => ((Vector4)x).Between01;
        [MethodImpl(AggressiveInlining)] public static Vector4 ClampZeroOne(this System.Numerics.Vector4 x) => ((Vector4)x).ClampZeroOne;
        [MethodImpl(AggressiveInlining)] public static Vector4 Fract(this System.Numerics.Vector4 x) => ((Vector4)x).Fract;
        [MethodImpl(AggressiveInlining)] public static Vector4 InversePow(this System.Numerics.Vector4 x, Vector4 y) => ((Vector4)x).InversePow(y);
        [MethodImpl(AggressiveInlining)] public static Vector4 Lerp(this System.Numerics.Vector4 a, Vector4 b, Number t) => ((Vector4)a).Lerp(b, t);
        [MethodImpl(AggressiveInlining)] public static Vector4 MultiplyEpsilon(this System.Numerics.Vector4 x, Vector4 y) => ((Vector4)x).MultiplyEpsilon(y);
        [MethodImpl(AggressiveInlining)] public static Vector4 Pow2(this System.Numerics.Vector4 x) => ((Vector4)x).Pow2;
        [MethodImpl(AggressiveInlining)] public static Vector4 Pow3(this System.Numerics.Vector4 x) => ((Vector4)x).Pow3;
        [MethodImpl(AggressiveInlining)] public static Vector4 Pow4(this System.Numerics.Vector4 x) => ((Vector4)x).Pow4;
        [MethodImpl(AggressiveInlining)] public static Vector4 Pow5(this System.Numerics.Vector4 x) => ((Vector4)x).Pow5;
        [MethodImpl(AggressiveInlining)] public static Vector4 Sqr(this System.Numerics.Vector4 x) => ((Vector4)x).Sqr;
        [MethodImpl(AggressiveInlining)] public static IReadOnlyList<Vector4> Sample(this System.Numerics.Vector4 a, Vector4 b, Integer n) => ((Vector4)a).Sample(b, n);
        [MethodImpl(AggressiveInlining)] public static Vector4 Half(this System.Numerics.Vector4 x) => ((Vector4)x).Half;
        [MethodImpl(AggressiveInlining)] public static Vector4 Quarter(this System.Numerics.Vector4 x) => ((Vector4)x).Quarter;
        [MethodImpl(AggressiveInlining)] public static Vector4 Eight(this System.Numerics.Vector4 x) => ((Vector4)x).Eight;
        [MethodImpl(AggressiveInlining)] public static Vector4 Sixteenth(this System.Numerics.Vector4 x) => ((Vector4)x).Sixteenth;
        [MethodImpl(AggressiveInlining)] public static Vector4 Tenth(this System.Numerics.Vector4 x) => ((Vector4)x).Tenth;
        [MethodImpl(AggressiveInlining)] public static Vector4 Twice(this System.Numerics.Vector4 x) => ((Vector4)x).Twice;
        [MethodImpl(AggressiveInlining)] public static Vector4 Hundred(this System.Numerics.Vector4 x) => ((Vector4)x).Hundred;
        [MethodImpl(AggressiveInlining)] public static Vector4 Thousand(this System.Numerics.Vector4 x) => ((Vector4)x).Thousand;
        [MethodImpl(AggressiveInlining)] public static Vector4 Million(this System.Numerics.Vector4 x) => ((Vector4)x).Million;
        [MethodImpl(AggressiveInlining)] public static Vector4 Billion(this System.Numerics.Vector4 x) => ((Vector4)x).Billion;
        [MethodImpl(AggressiveInlining)] public static Vector4 Hundredth(this System.Numerics.Vector4 x) => ((Vector4)x).Hundredth;
        [MethodImpl(AggressiveInlining)] public static Vector4 Thousandth(this System.Numerics.Vector4 x) => ((Vector4)x).Thousandth;
        [MethodImpl(AggressiveInlining)] public static Vector4 Millionth(this System.Numerics.Vector4 x) => ((Vector4)x).Millionth;
        [MethodImpl(AggressiveInlining)] public static Vector4 Billionth(this System.Numerics.Vector4 x) => ((Vector4)x).Billionth;
        [MethodImpl(AggressiveInlining)] public static Number At(this System.Numerics.Vector4 xs, Integer n) => ((Vector4)xs).At(n);
        [MethodImpl(AggressiveInlining)] public static Vector4 MapComponents(this System.Numerics.Vector4 x, System.Func<Number, Number> f) => ((Vector4)x).MapComponents(f);
        [MethodImpl(AggressiveInlining)] public static Vector4 ZipComponents(this System.Numerics.Vector4 a, Vector4 b, System.Func<Number, Number, Number> f) => ((Vector4)a).ZipComponents(b, f);
        [MethodImpl(AggressiveInlining)] public static Vector4 ZipComponents(this System.Numerics.Vector4 a, Vector4 b, Vector4 c, System.Func<Number, Number, Number, Number> f) => ((Vector4)a).ZipComponents(b, c, f);
        [MethodImpl(AggressiveInlining)] public static Boolean AllZipComponents(this System.Numerics.Vector4 a, Vector4 b, System.Func<Number, Number, Boolean> f) => ((Vector4)a).AllZipComponents(b, f);
        [MethodImpl(AggressiveInlining)] public static Boolean AllZipComponents(this System.Numerics.Vector4 a, Vector4 b, Vector4 c, System.Func<Number, Number, Number, Boolean> f) => ((Vector4)a).AllZipComponents(b, c, f);
        [MethodImpl(AggressiveInlining)] public static Boolean AnyZipComponents(this System.Numerics.Vector4 a, Vector4 b, System.Func<Number, Number, Boolean> f) => ((Vector4)a).AnyZipComponents(b, f);
        [MethodImpl(AggressiveInlining)] public static Boolean AnyZipComponents(this System.Numerics.Vector4 a, Vector4 b, Vector4 c, System.Func<Number, Number, Number, Boolean> f) => ((Vector4)a).AnyZipComponents(b, c, f);
        [MethodImpl(AggressiveInlining)] public static Boolean AllComponents(this System.Numerics.Vector4 x, System.Func<Number, Boolean> predicate) => ((Vector4)x).AllComponents(predicate);
        [MethodImpl(AggressiveInlining)] public static Boolean AnyComponent(this System.Numerics.Vector4 x, System.Func<Number, Boolean> predicate) => ((Vector4)x).AnyComponent(predicate);
    }
}
