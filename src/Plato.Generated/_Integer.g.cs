// Autogenerated file: DO NOT EDIT
// Created on 2025-06-07 6:14:52 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;
using Ara3D.Collections;

namespace Ara3D.Geometry
{
    [StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct Integer: IWholeNumber<Integer>
    {
        // Static factory function
        [MethodImpl(AggressiveInlining)] public static Integer Create() => new Integer();

        // Static default implementation
        public static readonly Integer Default = default;

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(Integer other) => Value.Equals(other.Value);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Integer other) => !Value.Equals(other.Value);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Integer other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public static Boolean operator==(Integer a, Integer b) => a.Equals(b);
        [MethodImpl(AggressiveInlining)] public static Boolean operator!=(Integer a, Integer b) => !a.Equals(b);
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Value.GetHashCode();
        [MethodImpl(AggressiveInlining)] public override string ToString() => Value.ToString();

        // Explicit implementation of interfaces by forwarding properties to fields

        // Implemented interface functions
        public Angle Turns { [MethodImpl(AggressiveInlining)] get  => this.Number.Turns; } 
public Angle Degrees { [MethodImpl(AggressiveInlining)] get  => this.Number.Turns; } 
public Angle Gradians { [MethodImpl(AggressiveInlining)] get  => this.Number.Gradians; } 
public Angle ArcMinutes { [MethodImpl(AggressiveInlining)] get  => this.Number.ArcMinutes; } 
public Angle ArcSeconds { [MethodImpl(AggressiveInlining)] get  => this.Number.ArcSeconds; } 
public IReadOnlyList<Point2D> CirclePoints { [MethodImpl(AggressiveInlining)] get  => this.Fractions.Map((x)  => x.Turns.UnitCircle); } 
public Integer PlusOne { [MethodImpl(AggressiveInlining)] get  => this.Add(((Integer)1)); } 
public Integer MinusOne { [MethodImpl(AggressiveInlining)] get  => this.Subtract(((Integer)1)); } 
public Integer FromOne { [MethodImpl(AggressiveInlining)] get  => ((Integer)1).Subtract(this); } 
[MethodImpl(AggressiveInlining)] public Number FloatDivision(Integer y) => this.Number.Divide(y.Number);
public IReadOnlyList<Number> Fractions { [MethodImpl(AggressiveInlining)] get {
            var _var82 = this;
            return this.Range.Map((i)  => i.FloatDivision(_var82.Subtract(((Integer)1))));
        }
         } 
public IReadOnlyList<Number> FractionsExclusive { [MethodImpl(AggressiveInlining)] get {
            var _var83 = this;
            return this.Range.Map((i)  => i.FloatDivision(_var83));
        }
         } 
public IReadOnlyList<Number> LinearSpace { [MethodImpl(AggressiveInlining)] get  => this.Fractions; } 
public IReadOnlyList<Number> LinearSpaceExclusive { [MethodImpl(AggressiveInlining)] get  => this.FractionsExclusive; } 
public IReadOnlyList<NumberInterval> Intervals { [MethodImpl(AggressiveInlining)] get  => this.Add(((Integer)1)).LinearSpace.WithNext((a, b)  => new NumberInterval(a, b), ((Boolean)false)); } 
[MethodImpl(AggressiveInlining)] public Integer Add(Integer b) => this + b;
        [MethodImpl(AggressiveInlining)] public Integer Divide(Integer b) => this / b;
        [MethodImpl(AggressiveInlining)] public Boolean GreaterThan(Integer b) => this > b;
        [MethodImpl(AggressiveInlining)] public Boolean GreaterThanOrEquals(Integer b) => this >= b;
        [MethodImpl(AggressiveInlining)] public Boolean LessThan(Integer b) => this < b;
        [MethodImpl(AggressiveInlining)] public Boolean LessThanOrEquals(Integer b) => this <= b;
        [MethodImpl(AggressiveInlining)] public Integer Modulo(Integer b) => this % b;
        [MethodImpl(AggressiveInlining)] public Integer Multiply(Integer b) => this * b;
        public Integer Negative { [MethodImpl(AggressiveInlining)] get => -this; }
        [MethodImpl(AggressiveInlining)] public Integer Subtract(Integer b) => this - b;
        [MethodImpl(AggressiveInlining)] public Integer4 QuadFaceIndices(Integer row, Integer nCols, Integer nRows){
            var a = row.Multiply(nCols).Add(this);
            var b = row.Multiply(nCols).Add(this.Add(((Integer)1)).Modulo(nCols));
            var c = row.Add(((Integer)1)).Modulo(nRows).Multiply(nCols).Add(this.Add(((Integer)1)).Modulo(nCols));
            var d = row.Add(((Integer)1)).Modulo(nRows).Multiply(nCols).Add(this);
            return (a, b, c, d);
        }

[MethodImpl(AggressiveInlining)] public IReadOnlyList2D<Integer4> AllQuadFaceIndices(Integer nRows, Boolean closedX, Boolean closedY){
            var _var85 = nRows;
            {
                var _var84 = this;
                {
                    var nx = this.Subtract(closedX ? ((Integer)0) : ((Integer)1));
                    var ny = nRows.Subtract(closedY ? ((Integer)0) : ((Integer)1));
                    return nx.MakeArray2D(ny, (col, row)  => col.QuadFaceIndices(row, _var84, _var85));
                }
            }
        }

[MethodImpl(AggressiveInlining)] public Integer Lesser(Integer b) => this.LessThanOrEquals(b) ? this : b;
[MethodImpl(AggressiveInlining)] public Integer Greater(Integer b) => this.GreaterThanOrEquals(b) ? this : b;
[MethodImpl(AggressiveInlining)] public Integer Average(Integer b) => this.Lerp(b, ((Number)0.5));
[MethodImpl(AggressiveInlining)] public IReadOnlyList<Integer> Sample(Integer b, Integer n){
            var _var87 = b;
            {
                var _var86 = this;
                return n.LinearSpace.Map((i)  => _var86.Lerp(_var87, i));
            }
        }


        // Unimplemented interface functions
    }
    // Extension methods for the type
    public static class IntegerExtensions
    {
        [MethodImpl(AggressiveInlining)] public static Integer Lerp(this Integer a, Integer b, Number t) => a.Lerp(b, t);
        [MethodImpl(AggressiveInlining)] public static Integer Lerp(this int a, Integer b, Number t) => ((Integer)a).Lerp(b, t);
        [MethodImpl(AggressiveInlining)] public static Angle Turns(this int x) => ((Integer)x).Turns;
        [MethodImpl(AggressiveInlining)] public static Angle Degrees(this int x) => ((Integer)x).Degrees;
        [MethodImpl(AggressiveInlining)] public static Angle Gradians(this int x) => ((Integer)x).Gradians;
        [MethodImpl(AggressiveInlining)] public static Angle ArcMinutes(this int x) => ((Integer)x).ArcMinutes;
        [MethodImpl(AggressiveInlining)] public static Angle ArcSeconds(this int x) => ((Integer)x).ArcSeconds;
        [MethodImpl(AggressiveInlining)] public static IReadOnlyList<Point2D> CirclePoints(this int n) => ((Integer)n).CirclePoints;
        [MethodImpl(AggressiveInlining)] public static Integer PlusOne(this int x) => ((Integer)x).PlusOne;
        [MethodImpl(AggressiveInlining)] public static Integer MinusOne(this int x) => ((Integer)x).MinusOne;
        [MethodImpl(AggressiveInlining)] public static Integer FromOne(this int x) => ((Integer)x).FromOne;
        [MethodImpl(AggressiveInlining)] public static Number FloatDivision(this int x, Integer y) => ((Integer)x).FloatDivision(y);
        [MethodImpl(AggressiveInlining)] public static IReadOnlyList<Number> Fractions(this int x) => ((Integer)x).Fractions;
        [MethodImpl(AggressiveInlining)] public static IReadOnlyList<Number> FractionsExclusive(this int x) => ((Integer)x).FractionsExclusive;
        [MethodImpl(AggressiveInlining)] public static IReadOnlyList<Number> LinearSpace(this int count) => ((Integer)count).LinearSpace;
        [MethodImpl(AggressiveInlining)] public static IReadOnlyList<Number> LinearSpaceExclusive(this int count) => ((Integer)count).LinearSpaceExclusive;
        [MethodImpl(AggressiveInlining)] public static IReadOnlyList<NumberInterval> Intervals(this int count) => ((Integer)count).Intervals;
        [MethodImpl(AggressiveInlining)] public static Integer Abs(this Integer self) => self.Abs;
        [MethodImpl(AggressiveInlining)] public static Integer Abs(this int self) => ((Integer)self).Abs;
        [MethodImpl(AggressiveInlining)] public static Integer Add(this Integer a, Integer b) => a.Add(b);
        [MethodImpl(AggressiveInlining)] public static Integer Add(this int a, Integer b) => ((Integer)a).Add(b);
        [MethodImpl(AggressiveInlining)] public static Integer CompareTo(this Integer self, Integer other) => self.CompareTo(other);
        [MethodImpl(AggressiveInlining)] public static Integer CompareTo(this int self, Integer other) => ((Integer)self).CompareTo(other);
        [MethodImpl(AggressiveInlining)] public static Integer Divide(this Integer a, Integer b) => a.Divide(b);
        [MethodImpl(AggressiveInlining)] public static Integer Divide(this int a, Integer b) => ((Integer)a).Divide(b);
        [MethodImpl(AggressiveInlining)] public static Boolean GreaterThan(this Integer a, Integer b) => a.GreaterThan(b);
        [MethodImpl(AggressiveInlining)] public static Boolean GreaterThan(this int a, Integer b) => ((Integer)a).GreaterThan(b);
        [MethodImpl(AggressiveInlining)] public static Boolean GreaterThanOrEquals(this Integer a, Integer b) => a.GreaterThanOrEquals(b);
        [MethodImpl(AggressiveInlining)] public static Boolean GreaterThanOrEquals(this int a, Integer b) => ((Integer)a).GreaterThanOrEquals(b);
        [MethodImpl(AggressiveInlining)] public static Boolean LessThan(this Integer a, Integer b) => a.LessThan(b);
        [MethodImpl(AggressiveInlining)] public static Boolean LessThan(this int a, Integer b) => ((Integer)a).LessThan(b);
        [MethodImpl(AggressiveInlining)] public static Boolean LessThanOrEquals(this Integer a, Integer b) => a.LessThanOrEquals(b);
        [MethodImpl(AggressiveInlining)] public static Boolean LessThanOrEquals(this int a, Integer b) => ((Integer)a).LessThanOrEquals(b);
        [MethodImpl(AggressiveInlining)] public static Integer Modulo(this Integer a, Integer b) => a.Modulo(b);
        [MethodImpl(AggressiveInlining)] public static Integer Modulo(this int a, Integer b) => ((Integer)a).Modulo(b);
        [MethodImpl(AggressiveInlining)] public static Integer Multiply(this Integer a, Integer b) => a.Multiply(b);
        [MethodImpl(AggressiveInlining)] public static Integer Multiply(this int a, Integer b) => ((Integer)a).Multiply(b);
        [MethodImpl(AggressiveInlining)] public static Integer Negative(this Integer n) => n.Negative;
        [MethodImpl(AggressiveInlining)] public static Integer Negative(this int n) => ((Integer)n).Negative;
        [MethodImpl(AggressiveInlining)] public static Number Number(this Integer n) => n.Number;
        [MethodImpl(AggressiveInlining)] public static Number Number(this int n) => ((Integer)n).Number;
        [MethodImpl(AggressiveInlining)] public static Integer Sign(this Integer self) => self.Sign;
        [MethodImpl(AggressiveInlining)] public static Integer Sign(this int self) => ((Integer)self).Sign;
        [MethodImpl(AggressiveInlining)] public static Integer Subtract(this Integer a, Integer b) => a.Subtract(b);
        [MethodImpl(AggressiveInlining)] public static Integer Subtract(this int a, Integer b) => ((Integer)a).Subtract(b);
        [MethodImpl(AggressiveInlining)] public static Integer4 QuadFaceIndices(this int col, Integer row, Integer nCols, Integer nRows) => ((Integer)col).QuadFaceIndices(row, nCols, nRows);
        [MethodImpl(AggressiveInlining)] public static IReadOnlyList2D<Integer4> AllQuadFaceIndices(this int nCols, Integer nRows, Boolean closedX, Boolean closedY) => ((Integer)nCols).AllQuadFaceIndices(nRows, closedX, closedY);
        [MethodImpl(AggressiveInlining)] public static Integer Lesser(this int a, Integer b) => ((Integer)a).Lesser(b);
        [MethodImpl(AggressiveInlining)] public static Integer Greater(this int a, Integer b) => ((Integer)a).Greater(b);
        [MethodImpl(AggressiveInlining)] public static Integer Average(this int a, Integer b) => ((Integer)a).Average(b);
        [MethodImpl(AggressiveInlining)] public static IReadOnlyList<Integer> Sample(this int a, Integer b, Integer n) => ((Integer)a).Sample(b, n);
    }
}
