// Autogenerated file: DO NOT EDIT
// Created on 2025-06-07 6:14:52 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;
using Ara3D.Collections;

namespace Ara3D.Geometry
{
    [StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct Matrix4x4: IValue, IArrayLike<Matrix4x4, Number>
    {
        // Static factory function
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 Create(Vector4 row1, Vector4 row2, Vector4 row3, Vector4 row4) => new Matrix4x4(row1, row2, row3, row4);

        // Static default implementation
        public static readonly Matrix4x4 Default = default;

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (Vector4, Vector4, Vector4, Vector4)(Matrix4x4 self) => (self.Row1, self.Row2, self.Row3, self.Row4);
        [MethodImpl(AggressiveInlining)] public static implicit operator Matrix4x4((Vector4, Vector4, Vector4, Vector4) value) => new Matrix4x4(value.Item1, value.Item2, value.Item3, value.Item4);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out Vector4 row1, out Vector4 row2, out Vector4 row3, out Vector4 row4) { row1 = Row1; row2 = Row2; row3 = Row3; row4 = Row4;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(Matrix4x4 other) => Value.Equals(other.Value);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Matrix4x4 other) => !Value.Equals(other.Value);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Matrix4x4 other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public static Boolean operator==(Matrix4x4 a, Matrix4x4 b) => a.Equals(b);
        [MethodImpl(AggressiveInlining)] public static Boolean operator!=(Matrix4x4 a, Matrix4x4 b) => !a.Equals(b);
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Value.GetHashCode();
        [MethodImpl(AggressiveInlining)] public override string ToString() => Value.ToString();

        // Explicit implementation of interfaces by forwarding properties to fields

        // IArrayLike predefined functions
        public Integer NumComponents { [MethodImpl(AggressiveInlining)] get => 16; }
        public IReadOnlyList<Number> Components { [MethodImpl(AggressiveInlining)] get => Intrinsics.MakeArray<Number>(M11, M12, M13, M14, M21, M22, M23, M24, M31, M32, M33, M34, M41, M42, M43, M44); }
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 CreateFromComponents(IReadOnlyList<Number> numbers) => new Matrix4x4(numbers[0], numbers[1], numbers[2], numbers[3], numbers[4], numbers[5], numbers[6], numbers[7], numbers[8], numbers[9], numbers[10], numbers[11], numbers[12], numbers[13], numbers[14], numbers[15]);

        [MethodImpl(AggressiveInlining)] public static Matrix4x4 CreateFromComponent(Number x) => new Matrix4x4(x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x);

        // Implemented interface functions
        [MethodImpl(AggressiveInlining)] public Matrix4x4 Add(Matrix4x4 value2) => this + value2;
        [MethodImpl(AggressiveInlining)] public Matrix4x4 Subtract(Matrix4x4 value2) => this - value2;
        [MethodImpl(AggressiveInlining)] public Matrix4x4 Multiply(Matrix4x4 value2) => this * value2;
        [MethodImpl(AggressiveInlining)] public Matrix4x4 Multiply(Number f) => this * f;
        [MethodImpl(AggressiveInlining)] public Matrix4x4 Divide(Number f) => this / f;
        public Number M11 { [MethodImpl(AggressiveInlining)] get  => this.Row1.X; } 
public Number M12 { [MethodImpl(AggressiveInlining)] get  => this.Row1.Y; } 
public Number M13 { [MethodImpl(AggressiveInlining)] get  => this.Row1.Z; } 
public Number M14 { [MethodImpl(AggressiveInlining)] get  => this.Row1.W; } 
public Number M21 { [MethodImpl(AggressiveInlining)] get  => this.Row2.X; } 
public Number M22 { [MethodImpl(AggressiveInlining)] get  => this.Row2.Y; } 
public Number M23 { [MethodImpl(AggressiveInlining)] get  => this.Row2.Z; } 
public Number M24 { [MethodImpl(AggressiveInlining)] get  => this.Row2.W; } 
public Number M31 { [MethodImpl(AggressiveInlining)] get  => this.Row3.X; } 
public Number M32 { [MethodImpl(AggressiveInlining)] get  => this.Row3.Y; } 
public Number M33 { [MethodImpl(AggressiveInlining)] get  => this.Row3.Z; } 
public Number M34 { [MethodImpl(AggressiveInlining)] get  => this.Row3.W; } 
public Number M41 { [MethodImpl(AggressiveInlining)] get  => this.Row4.X; } 
public Number M42 { [MethodImpl(AggressiveInlining)] get  => this.Row4.Y; } 
public Number M43 { [MethodImpl(AggressiveInlining)] get  => this.Row4.Z; } 
public Number M44 { [MethodImpl(AggressiveInlining)] get  => this.Row4.W; } 
public Vector4 Column1 { [MethodImpl(AggressiveInlining)] get  => (M11, M21, M31, M41); } 
public Vector4 Column2 { [MethodImpl(AggressiveInlining)] get  => (M12, M22, M32, M42); } 
public Vector4 Column3 { [MethodImpl(AggressiveInlining)] get  => (M13, M23, M33, M43); } 
public Vector4 Column4 { [MethodImpl(AggressiveInlining)] get  => (M14, M24, M34, M44); } 
[MethodImpl(AggressiveInlining)] public Vector3 Transform(Vector3 v) => v.Transform(this);
[MethodImpl(AggressiveInlining)] public Vector3 TransformNormal(Vector3 v) => v.TransformNormal(this);
[MethodImpl(AggressiveInlining)] public Vector3 Multiply(Vector3 v) => this.Transform(v);
public static Matrix4x4 Identity { [MethodImpl(AggressiveInlining)] get  => (Ara3D.Geometry.Vector4.UnitX, Ara3D.Geometry.Vector4.UnitY, Ara3D.Geometry.Vector4.UnitZ, Ara3D.Geometry.Vector4.UnitW); } 
[MethodImpl(AggressiveInlining)] public Number At(Integer n) => this.Components[n];
public Number this[Integer n] { [MethodImpl(AggressiveInlining)]  get => At(n); }
        public Matrix4x4 Reverse { [MethodImpl(AggressiveInlining)] get  => Matrix4x4.CreateFromComponents(this.Components.Reverse()); } 
[MethodImpl(AggressiveInlining)] public Matrix4x4 MapComponents(System.Func<Number, Number> f) => Matrix4x4.CreateFromComponents(this.Components.Map(f));
[MethodImpl(AggressiveInlining)] public Matrix4x4 ZipComponents(Matrix4x4 b, System.Func<Number, Number, Number> f) => Matrix4x4.CreateFromComponents(this.Components.Zip(b.Components, f));
[MethodImpl(AggressiveInlining)] public Matrix4x4 ZipComponents(Matrix4x4 b, Matrix4x4 c, System.Func<Number, Number, Number, Number> f) => Matrix4x4.CreateFromComponents(this.Components.Zip(b.Components, c.Components, f));
[MethodImpl(AggressiveInlining)] public Boolean AllZipComponents(Matrix4x4 b, System.Func<Number, Number, Boolean> f) => this.Components.Zip(b.Components, f).All((x)  => x);
[MethodImpl(AggressiveInlining)] public Boolean AllZipComponents(Matrix4x4 b, Matrix4x4 c, System.Func<Number, Number, Number, Boolean> f) => this.Components.Zip(b.Components, c.Components, f).All((x)  => x);
[MethodImpl(AggressiveInlining)] public Boolean AnyZipComponents(Matrix4x4 b, System.Func<Number, Number, Boolean> f) => this.Components.Zip(b.Components, f).Any((x)  => x);
[MethodImpl(AggressiveInlining)] public Boolean AnyZipComponents(Matrix4x4 b, Matrix4x4 c, System.Func<Number, Number, Number, Boolean> f) => this.Components.Zip(b.Components, c.Components, f).Any((x)  => x);
[MethodImpl(AggressiveInlining)] public Boolean AllComponents(System.Func<Number, Boolean> predicate) => this.Components.All(predicate);
[MethodImpl(AggressiveInlining)] public Boolean AnyComponent(System.Func<Number, Boolean> predicate) => this.Components.Any(predicate);

        // Unimplemented interface functions
    }
    // Extension methods for the type
    public static class Matrix4x4Extensions
    {
        [MethodImpl(AggressiveInlining)] public static Vector4 Row1(this Matrix4x4 self) => self.Row1;
        [MethodImpl(AggressiveInlining)] public static Vector4 Row1(this System.Numerics.Matrix4x4 self) => ((Matrix4x4)self).Row1;
        [MethodImpl(AggressiveInlining)] public static Vector4 Row2(this Matrix4x4 self) => self.Row2;
        [MethodImpl(AggressiveInlining)] public static Vector4 Row2(this System.Numerics.Matrix4x4 self) => ((Matrix4x4)self).Row2;
        [MethodImpl(AggressiveInlining)] public static Vector4 Row3(this Matrix4x4 self) => self.Row3;
        [MethodImpl(AggressiveInlining)] public static Vector4 Row3(this System.Numerics.Matrix4x4 self) => ((Matrix4x4)self).Row3;
        [MethodImpl(AggressiveInlining)] public static Vector4 Row4(this Matrix4x4 self) => self.Row4;
        [MethodImpl(AggressiveInlining)] public static Vector4 Row4(this System.Numerics.Matrix4x4 self) => ((Matrix4x4)self).Row4;
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 WithRow1(this Matrix4x4 self, Vector4 row) => self.WithRow1(row);
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 WithRow1(this System.Numerics.Matrix4x4 self, Vector4 row) => ((Matrix4x4)self).WithRow1(row);
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 WithRow2(this Matrix4x4 self, Vector4 row) => self.WithRow2(row);
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 WithRow2(this System.Numerics.Matrix4x4 self, Vector4 row) => ((Matrix4x4)self).WithRow2(row);
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 WithRow3(this Matrix4x4 self, Vector4 row) => self.WithRow3(row);
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 WithRow3(this System.Numerics.Matrix4x4 self, Vector4 row) => ((Matrix4x4)self).WithRow3(row);
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 WithRow4(this Matrix4x4 self, Vector4 row) => self.WithRow4(row);
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 WithRow4(this System.Numerics.Matrix4x4 self, Vector4 row) => ((Matrix4x4)self).WithRow4(row);
        [MethodImpl(AggressiveInlining)] public static Number Determinant(this Matrix4x4 self) => self.Determinant;
        [MethodImpl(AggressiveInlining)] public static Number Determinant(this System.Numerics.Matrix4x4 self) => ((Matrix4x4)self).Determinant;
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 Transpose(this Matrix4x4 self) => self.Transpose;
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 Transpose(this System.Numerics.Matrix4x4 self) => ((Matrix4x4)self).Transpose;
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 Add(this Matrix4x4 value1, Matrix4x4 value2) => value1.Add(value2);
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 Add(this System.Numerics.Matrix4x4 value1, Matrix4x4 value2) => ((Matrix4x4)value1).Add(value2);
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 Subtract(this Matrix4x4 value1, Matrix4x4 value2) => value1.Subtract(value2);
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 Subtract(this System.Numerics.Matrix4x4 value1, Matrix4x4 value2) => ((Matrix4x4)value1).Subtract(value2);
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 Multiply(this Matrix4x4 value1, Matrix4x4 value2) => value1.Multiply(value2);
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 Multiply(this System.Numerics.Matrix4x4 value1, Matrix4x4 value2) => ((Matrix4x4)value1).Multiply(value2);
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 Multiply(this Matrix4x4 value1, Number f) => value1.Multiply(f);
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 Multiply(this System.Numerics.Matrix4x4 value1, Number f) => ((Matrix4x4)value1).Multiply(f);
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 Divide(this Matrix4x4 value1, Number f) => value1.Divide(f);
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 Divide(this System.Numerics.Matrix4x4 value1, Number f) => ((Matrix4x4)value1).Divide(f);
        [MethodImpl(AggressiveInlining)] public static Tuple4<Vector3, Quaternion, Vector3, Boolean> Decompose(this Matrix4x4 self) => self.Decompose;
        [MethodImpl(AggressiveInlining)] public static Tuple4<Vector3, Quaternion, Vector3, Boolean> Decompose(this System.Numerics.Matrix4x4 self) => ((Matrix4x4)self).Decompose;
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 Lerp(this Matrix4x4 self, Matrix4x4 matrix2, Number amount) => self.Lerp(matrix2, amount);
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 Lerp(this System.Numerics.Matrix4x4 self, Matrix4x4 matrix2, Number amount) => ((Matrix4x4)self).Lerp(matrix2, amount);
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 Invert(this Matrix4x4 self) => self.Invert;
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 Invert(this System.Numerics.Matrix4x4 self) => ((Matrix4x4)self).Invert;
        [MethodImpl(AggressiveInlining)] public static Boolean CanInvert(this Matrix4x4 self) => self.CanInvert;
        [MethodImpl(AggressiveInlining)] public static Boolean CanInvert(this System.Numerics.Matrix4x4 self) => ((Matrix4x4)self).CanInvert;
        [MethodImpl(AggressiveInlining)] public static Quaternion Rotation(this Matrix4x4 self) => self.Rotation;
        [MethodImpl(AggressiveInlining)] public static Quaternion Rotation(this System.Numerics.Matrix4x4 self) => ((Matrix4x4)self).Rotation;
        [MethodImpl(AggressiveInlining)] public static Vector3 Translation(this Matrix4x4 self) => self.Translation;
        [MethodImpl(AggressiveInlining)] public static Vector3 Translation(this System.Numerics.Matrix4x4 self) => ((Matrix4x4)self).Translation;
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 WithTranslation(this Matrix4x4 self, Vector3 translation) => self.WithTranslation(translation);
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 WithTranslation(this System.Numerics.Matrix4x4 self, Vector3 translation) => ((Matrix4x4)self).WithTranslation(translation);
        [MethodImpl(AggressiveInlining)] public static Number M11(this System.Numerics.Matrix4x4 m) => ((Matrix4x4)m).M11;
        [MethodImpl(AggressiveInlining)] public static Number M12(this System.Numerics.Matrix4x4 m) => ((Matrix4x4)m).M12;
        [MethodImpl(AggressiveInlining)] public static Number M13(this System.Numerics.Matrix4x4 m) => ((Matrix4x4)m).M13;
        [MethodImpl(AggressiveInlining)] public static Number M14(this System.Numerics.Matrix4x4 m) => ((Matrix4x4)m).M14;
        [MethodImpl(AggressiveInlining)] public static Number M21(this System.Numerics.Matrix4x4 m) => ((Matrix4x4)m).M21;
        [MethodImpl(AggressiveInlining)] public static Number M22(this System.Numerics.Matrix4x4 m) => ((Matrix4x4)m).M22;
        [MethodImpl(AggressiveInlining)] public static Number M23(this System.Numerics.Matrix4x4 m) => ((Matrix4x4)m).M23;
        [MethodImpl(AggressiveInlining)] public static Number M24(this System.Numerics.Matrix4x4 m) => ((Matrix4x4)m).M24;
        [MethodImpl(AggressiveInlining)] public static Number M31(this System.Numerics.Matrix4x4 m) => ((Matrix4x4)m).M31;
        [MethodImpl(AggressiveInlining)] public static Number M32(this System.Numerics.Matrix4x4 m) => ((Matrix4x4)m).M32;
        [MethodImpl(AggressiveInlining)] public static Number M33(this System.Numerics.Matrix4x4 m) => ((Matrix4x4)m).M33;
        [MethodImpl(AggressiveInlining)] public static Number M34(this System.Numerics.Matrix4x4 m) => ((Matrix4x4)m).M34;
        [MethodImpl(AggressiveInlining)] public static Number M41(this System.Numerics.Matrix4x4 m) => ((Matrix4x4)m).M41;
        [MethodImpl(AggressiveInlining)] public static Number M42(this System.Numerics.Matrix4x4 m) => ((Matrix4x4)m).M42;
        [MethodImpl(AggressiveInlining)] public static Number M43(this System.Numerics.Matrix4x4 m) => ((Matrix4x4)m).M43;
        [MethodImpl(AggressiveInlining)] public static Number M44(this System.Numerics.Matrix4x4 m) => ((Matrix4x4)m).M44;
        [MethodImpl(AggressiveInlining)] public static Vector4 Column1(this System.Numerics.Matrix4x4 m) => ((Matrix4x4)m).Column1;
        [MethodImpl(AggressiveInlining)] public static Vector4 Column2(this System.Numerics.Matrix4x4 m) => ((Matrix4x4)m).Column2;
        [MethodImpl(AggressiveInlining)] public static Vector4 Column3(this System.Numerics.Matrix4x4 m) => ((Matrix4x4)m).Column3;
        [MethodImpl(AggressiveInlining)] public static Vector4 Column4(this System.Numerics.Matrix4x4 m) => ((Matrix4x4)m).Column4;
        [MethodImpl(AggressiveInlining)] public static Vector3 Transform(this System.Numerics.Matrix4x4 m, Vector3 v) => ((Matrix4x4)m).Transform(v);
        [MethodImpl(AggressiveInlining)] public static Vector3 TransformNormal(this System.Numerics.Matrix4x4 m, Vector3 v) => ((Matrix4x4)m).TransformNormal(v);
        [MethodImpl(AggressiveInlining)] public static Vector3 Multiply(this System.Numerics.Matrix4x4 m, Vector3 v) => ((Matrix4x4)m).Multiply(v);
        [MethodImpl(AggressiveInlining)] public static Number At(this System.Numerics.Matrix4x4 xs, Integer n) => ((Matrix4x4)xs).At(n);
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 Reverse(this System.Numerics.Matrix4x4 xs) => ((Matrix4x4)xs).Reverse;
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 MapComponents(this System.Numerics.Matrix4x4 x, System.Func<Number, Number> f) => ((Matrix4x4)x).MapComponents(f);
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 ZipComponents(this System.Numerics.Matrix4x4 a, Matrix4x4 b, System.Func<Number, Number, Number> f) => ((Matrix4x4)a).ZipComponents(b, f);
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 ZipComponents(this System.Numerics.Matrix4x4 a, Matrix4x4 b, Matrix4x4 c, System.Func<Number, Number, Number, Number> f) => ((Matrix4x4)a).ZipComponents(b, c, f);
        [MethodImpl(AggressiveInlining)] public static Boolean AllZipComponents(this System.Numerics.Matrix4x4 a, Matrix4x4 b, System.Func<Number, Number, Boolean> f) => ((Matrix4x4)a).AllZipComponents(b, f);
        [MethodImpl(AggressiveInlining)] public static Boolean AllZipComponents(this System.Numerics.Matrix4x4 a, Matrix4x4 b, Matrix4x4 c, System.Func<Number, Number, Number, Boolean> f) => ((Matrix4x4)a).AllZipComponents(b, c, f);
        [MethodImpl(AggressiveInlining)] public static Boolean AnyZipComponents(this System.Numerics.Matrix4x4 a, Matrix4x4 b, System.Func<Number, Number, Boolean> f) => ((Matrix4x4)a).AnyZipComponents(b, f);
        [MethodImpl(AggressiveInlining)] public static Boolean AnyZipComponents(this System.Numerics.Matrix4x4 a, Matrix4x4 b, Matrix4x4 c, System.Func<Number, Number, Number, Boolean> f) => ((Matrix4x4)a).AnyZipComponents(b, c, f);
        [MethodImpl(AggressiveInlining)] public static Boolean AllComponents(this System.Numerics.Matrix4x4 x, System.Func<Number, Boolean> predicate) => ((Matrix4x4)x).AllComponents(predicate);
        [MethodImpl(AggressiveInlining)] public static Boolean AnyComponent(this System.Numerics.Matrix4x4 x, System.Func<Number, Boolean> predicate) => ((Matrix4x4)x).AnyComponent(predicate);
    }
}
