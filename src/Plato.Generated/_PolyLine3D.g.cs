// Autogenerated file: DO NOT EDIT
// Created on 2025-06-05 2:34:17 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;
using Ara3D.Collections;

namespace Ara3D.Geometry
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct PolyLine3D: IGeometry3D
    {
        // Fields
        [DataMember] public readonly IReadOnlyList<Point3D> Points;
        [DataMember] public readonly Boolean Closed;

        // With functions 
        [MethodImpl(AggressiveInlining)] public PolyLine3D WithPoints(IReadOnlyList<Point3D> points) => new PolyLine3D(points, Closed);
        [MethodImpl(AggressiveInlining)] public PolyLine3D WithClosed(Boolean closed) => new PolyLine3D(Points, closed);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public PolyLine3D(IReadOnlyList<Point3D> points, Boolean closed) { Points = points; Closed = closed; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static PolyLine3D Create(IReadOnlyList<Point3D> points, Boolean closed) => new PolyLine3D(points, closed);

        // Static default implementation
        public static readonly PolyLine3D Default = default;

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (IReadOnlyList<Point3D>, Boolean)(PolyLine3D self) => (self.Points, self.Closed);
        [MethodImpl(AggressiveInlining)] public static implicit operator PolyLine3D((IReadOnlyList<Point3D>, Boolean) value) => new PolyLine3D(value.Item1, value.Item2);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out IReadOnlyList<Point3D> points, out Boolean closed) { points = Points; closed = Closed;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(PolyLine3D other) => Points.Equals(other.Points) && Closed.Equals(other.Closed);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(PolyLine3D other) => !Points.Equals(other.Points) && Closed.Equals(other.Closed);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is PolyLine3D other ? Equals(other).Value : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Points, Closed);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Points\" = {Points}, \"Closed\" = {Closed} }}";

        // Explicit implementation of interfaces by forwarding properties to fields

        // Implemented interface functions
        public IReadOnlyList<Line3D> Lines { [MethodImpl(AggressiveInlining)] get  => this.Points.WithNext((a, b)  => new Line3D(a, b), this.Closed); } 
[MethodImpl(AggressiveInlining)] public PolyLine3D Deform(System.Func<Point3D, Point3D> f) => (this.Points.Map(f), this.Closed);

        // Unimplemented interface functions
    }
    // Extension methods for the type
    public static class PolyLine3DExtensions
    {
    }
}
