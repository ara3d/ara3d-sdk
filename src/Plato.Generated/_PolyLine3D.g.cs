// Autogenerated file: DO NOT EDIT
// Created on 2025-06-04 10:07:55 AM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;
using Ara3D.Collections;

namespace Plato
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct PolyLine3D: IPolyLine3D<PolyLine3D>
    {
        // Fields
        [DataMember] public readonly IReadOnlyList<Point3D> Points;
        [DataMember] public readonly Boolean Closed;

        // With functions 
        [MethodImpl(AggressiveInlining)] public PolyLine3D WithPoints(IReadOnlyList<Point3D> points) => new PolyLine3D(points, Closed);
        [MethodImpl(AggressiveInlining)] public PolyLine3D WithClosed(Boolean closed) => new PolyLine3D(Points, closed);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public PolyLine3D(IReadOnlyList<Point3D> points, Boolean closed) { Points = points; Closed = closed; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static PolyLine3D Create(IReadOnlyList<Point3D> points, Boolean closed) => new PolyLine3D(points, closed);

        // Static default implementation
        public static readonly PolyLine3D Default = default;

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (IReadOnlyList<Point3D>, Boolean)(PolyLine3D self) => (self.Points, self.Closed);
        [MethodImpl(AggressiveInlining)] public static implicit operator PolyLine3D((IReadOnlyList<Point3D>, Boolean) value) => new PolyLine3D(value.Item1, value.Item2);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out IReadOnlyList<Point3D> points, out Boolean closed) { points = Points; closed = Closed;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(PolyLine3D other) => Points.Equals(other.Points) && Closed.Equals(other.Closed);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(PolyLine3D other) => !Points.Equals(other.Points) && Closed.Equals(other.Closed);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is PolyLine3D other ? Equals(other).Value : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Points, Closed);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Points\" = {Points}, \"Closed\" = {Closed} }}";

        // Explicit implementation of interfaces by forwarding properties to fields
        Boolean IOpenClosedShape.Closed { [MethodImpl(AggressiveInlining)] get => Closed; }
        IReadOnlyList<Point3D> IPointGeometry3D<PolyLine3D>.Points { [MethodImpl(AggressiveInlining)] get => Points; }

        // Implemented interface functions
        [MethodImpl(AggressiveInlining)] public PolyLine3D Deform(System.Func<Point3D, Point3D> f) => (this.Points.Map(f), this.Closed);
public IReadOnlyList<Line3D> Lines { [MethodImpl(AggressiveInlining)] get  => this.Points.WithNext((a, b)  => new Line3D(a, b), this.Closed); } 
[MethodImpl(AggressiveInlining)] public Point3D Point(Integer index) => this.Points[index];
[MethodImpl(AggressiveInlining)] public Triangle3D Triangle(Integer3 f) => (this.Point(f.A), this.Point(f.B), this.Point(f.C));
[MethodImpl(AggressiveInlining)] public Quad3D Quad(Integer4 f) => (this.Point(f.A), this.Point(f.B), this.Point(f.C), this.Point(f.D));
public Bounds3D Bounds { [MethodImpl(AggressiveInlining)] get  => this.Points.Bounds(); } 
[MethodImpl(AggressiveInlining)] public PolyLine3D Deform<_T0>(_T0 t) where _T0 : ITransform3D{
            var _var99 = t;
            return this.Deform((v)  => v.Vector3.Transform(_var99.Matrix));
        }

[MethodImpl(AggressiveInlining)] public PolyLine3D Scale(Vector3 v){
            var _var100 = v;
            return this.Deform((p)  => p.Vector3.Multiply(_var100));
        }

[MethodImpl(AggressiveInlining)] public PolyLine3D Scale(Number s) => this.Scale((s, s, s));
[MethodImpl(AggressiveInlining)] public PolyLine3D ScaleX(Number s) => this.Scale((s, ((Integer)1), ((Integer)1)));
[MethodImpl(AggressiveInlining)] public PolyLine3D ScaleY(Number s) => this.Scale((((Integer)1), s, ((Integer)1)));
[MethodImpl(AggressiveInlining)] public PolyLine3D ScaleZ(Number s) => this.Scale((((Integer)1), ((Integer)1), s));
[MethodImpl(AggressiveInlining)] public PolyLine3D Rotate(Quaternion q){
            var _var101 = q;
            return this.Deform((v)  => _var101.Transform(v));
        }

[MethodImpl(AggressiveInlining)] public PolyLine3D RotateX(Angle a) => this.Rotate(a.RotateX);
[MethodImpl(AggressiveInlining)] public PolyLine3D RotateY(Angle a) => this.Rotate(a.RotateY);
[MethodImpl(AggressiveInlining)] public PolyLine3D RotateZ(Angle a) => this.Rotate(a.RotateZ);
[MethodImpl(AggressiveInlining)] public PolyLine3D Translate(Vector3 v){
            var _var102 = v;
            return this.Deform((p)  => p.Add(_var102));
        }

[MethodImpl(AggressiveInlining)] public PolyLine3D TranslateX(Number s) => this.Translate(s.XVector3);
[MethodImpl(AggressiveInlining)] public PolyLine3D TranslateY(Number s) => this.Translate(s.YVector3);
[MethodImpl(AggressiveInlining)] public PolyLine3D TranslateZ(Number s) => this.Translate(s.ZVector3);
[MethodImpl(AggressiveInlining)] public IReadOnlyList<Point3D> Sample(Integer numPoints){
            var _var103 = this;
            return numPoints.LinearSpace.Map((x)  => _var103.Eval(x));
        }

[MethodImpl(AggressiveInlining)] public PolyLine3D ToPolyLine3D(Integer numPoints) => (this.Sample(numPoints), this.Closed);

        // Unimplemented interface functions
        [MethodImpl(AggressiveInlining)] public Point3D Eval(Number t) => throw new NotImplementedException();
}
    // Extension methods for the type
    public static partial class Extensions
    {
        [MethodImpl(AggressiveInlining)] public static Point3D Eval(this PolyLine3D x, Number t) => x.Eval(t);
    }
}
