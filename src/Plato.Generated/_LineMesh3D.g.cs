// Autogenerated file: DO NOT EDIT
// Created on 2025-06-05 2:34:17 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;
using Ara3D.Collections;

namespace Ara3D.Geometry
{
    [DataContract, StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct LineMesh3D: IIndexedGeometry3D<LineMesh3D, Integer2>
    {
        // Fields
        [DataMember] public readonly IReadOnlyList<Point3D> Points;
        [DataMember] public readonly IReadOnlyList<Integer2> FaceIndices;

        // With functions 
        [MethodImpl(AggressiveInlining)] public LineMesh3D WithPoints(IReadOnlyList<Point3D> points) => new LineMesh3D(points, FaceIndices);
        [MethodImpl(AggressiveInlining)] public LineMesh3D WithFaceIndices(IReadOnlyList<Integer2> faceIndices) => new LineMesh3D(Points, faceIndices);

        // Regular Constructor
        [MethodImpl(AggressiveInlining)] public LineMesh3D(IReadOnlyList<Point3D> points, IReadOnlyList<Integer2> faceIndices) { Points = points; FaceIndices = faceIndices; }

        // Static factory function
        [MethodImpl(AggressiveInlining)] public static LineMesh3D Create(IReadOnlyList<Point3D> points, IReadOnlyList<Integer2> faceIndices) => new LineMesh3D(points, faceIndices);

        // Static default implementation
        public static readonly LineMesh3D Default = default;

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (IReadOnlyList<Point3D>, IReadOnlyList<Integer2>)(LineMesh3D self) => (self.Points, self.FaceIndices);
        [MethodImpl(AggressiveInlining)] public static implicit operator LineMesh3D((IReadOnlyList<Point3D>, IReadOnlyList<Integer2>) value) => new LineMesh3D(value.Item1, value.Item2);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out IReadOnlyList<Point3D> points, out IReadOnlyList<Integer2> faceIndices) { points = Points; faceIndices = FaceIndices;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(LineMesh3D other) => Points.Equals(other.Points) && FaceIndices.Equals(other.FaceIndices);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(LineMesh3D other) => !Points.Equals(other.Points) && FaceIndices.Equals(other.FaceIndices);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is LineMesh3D other ? Equals(other).Value : false;
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Intrinsics.CombineHashCodes(Points, FaceIndices);
        [MethodImpl(AggressiveInlining)] public override string ToString() => $"{{ \"Points\" = {Points}, \"FaceIndices\" = {FaceIndices} }}";

        // Explicit implementation of interfaces by forwarding properties to fields
        IReadOnlyList<Integer2> IIndexedGeometry3D<LineMesh3D, Integer2>.FaceIndices { [MethodImpl(AggressiveInlining)] get => FaceIndices; }
        IReadOnlyList<Point3D> IPointGeometry3D<LineMesh3D>.Points { [MethodImpl(AggressiveInlining)] get => Points; }

        // Implemented interface functions
        public IReadOnlyList<Line3D> Lines { [MethodImpl(AggressiveInlining)] get {
            var _var69 = this;
            return this.FaceIndices.Map((fi)  => _var69.Line(fi));
        }
         } 
[MethodImpl(AggressiveInlining)] public LineMesh3D Deform(System.Func<Point3D, Point3D> f) => (this.Points.Map(f), this.FaceIndices);
[MethodImpl(AggressiveInlining)] public Line3D Line(Integer2 index) => this.Points.Line(index);
[MethodImpl(AggressiveInlining)] public Triangle3D Triangle(Integer3 index) => this.Points.Triangle(index);
[MethodImpl(AggressiveInlining)] public Quad3D Quad(Integer4 index) => this.Points.Quad(index);
public Bounds3D Bounds { [MethodImpl(AggressiveInlining)] get  => this.Points.Bounds(); } 
[MethodImpl(AggressiveInlining)] public LineMesh3D Transform(Transform3D t){
            var _var70 = t;
            return this.Deform((p)  => p.Vector3.Transform(_var70.Matrix));
        }

[MethodImpl(AggressiveInlining)] public LineMesh3D Scale(Vector3 v) => this.Transform(new Scaling3D(v));
[MethodImpl(AggressiveInlining)] public LineMesh3D Scale(Number s) => this.Scale((s, s, s));
[MethodImpl(AggressiveInlining)] public LineMesh3D ScaleX(Number s) => this.Scale((s, ((Integer)1), ((Integer)1)));
[MethodImpl(AggressiveInlining)] public LineMesh3D ScaleY(Number s) => this.Scale((((Integer)1), s, ((Integer)1)));
[MethodImpl(AggressiveInlining)] public LineMesh3D ScaleZ(Number s) => this.Scale((((Integer)1), ((Integer)1), s));
[MethodImpl(AggressiveInlining)] public LineMesh3D Rotate(Quaternion q) => this.Transform(new Rotation3D(q));
[MethodImpl(AggressiveInlining)] public LineMesh3D RotateX(Angle a) => this.Rotate(a.RotateX);
[MethodImpl(AggressiveInlining)] public LineMesh3D RotateY(Angle a) => this.Rotate(a.RotateY);
[MethodImpl(AggressiveInlining)] public LineMesh3D RotateZ(Angle a) => this.Rotate(a.RotateZ);
[MethodImpl(AggressiveInlining)] public LineMesh3D Translate(Vector3 v) => this.Transform(new Translation3D(v));
[MethodImpl(AggressiveInlining)] public LineMesh3D TranslateX(Number s) => this.Translate(s.XVector3);
[MethodImpl(AggressiveInlining)] public LineMesh3D TranslateY(Number s) => this.Translate(s.YVector3);
[MethodImpl(AggressiveInlining)] public LineMesh3D TranslateZ(Number s) => this.Translate(s.ZVector3);

        // Unimplemented interface functions
    }
    // Extension methods for the type
    public static class LineMesh3DExtensions
    {
    }
}
