// Autogenerated file: DO NOT EDIT
// Created on 2025-06-03 11:05:48 PM

using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.InteropServices;
using static System.Runtime.CompilerServices.MethodImplOptions;
using Ara3D.Collections;

namespace Plato
{
    [StructLayout(LayoutKind.Sequential, Pack=1)]
    public partial struct Quaternion: IValue, IArrayLike<Quaternion, Number>
    {
        // Static factory function
        [MethodImpl(AggressiveInlining)] public static Quaternion Create(Number x, Number y, Number z, Number w) => new Quaternion(x, y, z, w);

        // Static default implementation
        public static readonly Quaternion Default = default;

        // Implicit converters to/from value-tuples and deconstructor
        [MethodImpl(AggressiveInlining)] public static implicit operator (Number, Number, Number, Number)(Quaternion self) => (self.X, self.Y, self.Z, self.W);
        [MethodImpl(AggressiveInlining)] public static implicit operator Quaternion((Number, Number, Number, Number) value) => new Quaternion(value.Item1, value.Item2, value.Item3, value.Item4);
        [MethodImpl(AggressiveInlining)] public void Deconstruct(out Number x, out Number y, out Number z, out Number w) { x = X; y = Y; z = Z; w = W;  }

        // Object virtual function overrides: Equals, GetHashCode, ToString
        [MethodImpl(AggressiveInlining)] public Boolean Equals(Quaternion other) => Value.Equals(other.Value);
        [MethodImpl(AggressiveInlining)] public Boolean NotEquals(Quaternion other) => !Value.Equals(other.Value);
        [MethodImpl(AggressiveInlining)] public override bool Equals(object obj) => obj is Quaternion other ? Equals(other) : false;
        [MethodImpl(AggressiveInlining)] public static Boolean operator==(Quaternion a, Quaternion b) => a.Equals(b);
        [MethodImpl(AggressiveInlining)] public static Boolean operator!=(Quaternion a, Quaternion b) => !a.Equals(b);
        [MethodImpl(AggressiveInlining)] public override int GetHashCode() => Value.GetHashCode();
        [MethodImpl(AggressiveInlining)] public override string ToString() => Value.ToString();

        // Explicit implementation of interfaces by forwarding properties to fields

        // IArrayLike predefined functions
        public Integer NumComponents { [MethodImpl(AggressiveInlining)] get => 4; }
        public System.Collections.Generic.IReadOnlyList<Number> Components { [MethodImpl(AggressiveInlining)] get => Intrinsics.MakeArray<Number>(X, Y, Z, W); }
        [MethodImpl(AggressiveInlining)] public static Quaternion CreateFromComponents(System.Collections.Generic.IReadOnlyList<Number> numbers) => new Quaternion(numbers[0], numbers[1], numbers[2], numbers[3]);

        [MethodImpl(AggressiveInlining)] public static Quaternion CreateFromComponent(Number x) => new Quaternion(x, x, x, x);

        // Implemented interface functions
        [MethodImpl(AggressiveInlining)] public Quaternion Add(Quaternion b) => this + b;
        [MethodImpl(AggressiveInlining)] public Quaternion Subtract(Quaternion b) => this - b;
        public Quaternion Negative { [MethodImpl(AggressiveInlining)] get => -this; }
        [MethodImpl(AggressiveInlining)] public Quaternion Multiply(Quaternion b) => this * b;
        [MethodImpl(AggressiveInlining)] public Quaternion Multiply(Number scalar) => this * scalar;
        [MethodImpl(AggressiveInlining)] public Quaternion Divide(Quaternion b) => this / b;
        [MethodImpl(AggressiveInlining)] public Vector3 Transform(Vector3 v) => v.Transform(this);
[MethodImpl(AggressiveInlining)] public Vector3 Multiply(Vector3 v) => this.Transform(v);
public Matrix4x4 Matrix { [MethodImpl(AggressiveInlining)] get  => this; } 
public Matrix4x4 Matrix4x4 { [MethodImpl(AggressiveInlining)] get  => Plato.Matrix4x4.CreateFromQuaternion(this); } 
[MethodImpl(AggressiveInlining)]  public static implicit operator Matrix4x4(Quaternion q) => q.Matrix4x4;
        public static Quaternion Identity { [MethodImpl(AggressiveInlining)] get  => (((Number)0), ((Number)0), ((Number)0), ((Number)1)); } 
[MethodImpl(AggressiveInlining)] public Number At(Integer n) => this.Components[n];
public Number this[Integer n] { [MethodImpl(AggressiveInlining)]  get => At(n); }
        [MethodImpl(AggressiveInlining)] public Quaternion MapComponents(System.Func<Number, Number> f) => Quaternion.CreateFromComponents(this.Components.Map(f));
[MethodImpl(AggressiveInlining)] public Quaternion ZipComponents(Quaternion b, System.Func<Number, Number, Number> f) => Quaternion.CreateFromComponents(this.Components.Zip(b.Components, f));
[MethodImpl(AggressiveInlining)] public Quaternion ZipComponents(Quaternion b, Quaternion c, System.Func<Number, Number, Number, Number> f) => Quaternion.CreateFromComponents(this.Components.Zip(b.Components, c.Components, f));
[MethodImpl(AggressiveInlining)] public Boolean AllZipComponents(Quaternion b, System.Func<Number, Number, Boolean> f) => this.Components.Zip(b.Components, f).All((x)  => x);
[MethodImpl(AggressiveInlining)] public Boolean AllZipComponents(Quaternion b, Quaternion c, System.Func<Number, Number, Number, Boolean> f) => this.Components.Zip(b.Components, c.Components, f).All((x)  => x);
[MethodImpl(AggressiveInlining)] public Boolean AnyZipComponents(Quaternion b, System.Func<Number, Number, Boolean> f) => this.Components.Zip(b.Components, f).Any((x)  => x);
[MethodImpl(AggressiveInlining)] public Boolean AnyZipComponents(Quaternion b, Quaternion c, System.Func<Number, Number, Number, Boolean> f) => this.Components.Zip(b.Components, c.Components, f).Any((x)  => x);
[MethodImpl(AggressiveInlining)] public Boolean AllComponents(System.Func<Number, Boolean> predicate) => this.Components.All(predicate);
[MethodImpl(AggressiveInlining)] public Boolean AnyComponent(System.Func<Number, Boolean> predicate) => this.Components.Any(predicate);

        // Unimplemented interface functions
    }
    // Extension methods for the type
    public static partial class Extensions
    {
        [MethodImpl(AggressiveInlining)] public static Number X(this Quaternion self) => self.X;
        [MethodImpl(AggressiveInlining)] public static Number X(this System.Numerics.Quaternion self) => ((Quaternion)self).X;
        [MethodImpl(AggressiveInlining)] public static Number Y(this Quaternion self) => self.Y;
        [MethodImpl(AggressiveInlining)] public static Number Y(this System.Numerics.Quaternion self) => ((Quaternion)self).Y;
        [MethodImpl(AggressiveInlining)] public static Number Z(this Quaternion self) => self.Z;
        [MethodImpl(AggressiveInlining)] public static Number Z(this System.Numerics.Quaternion self) => ((Quaternion)self).Z;
        [MethodImpl(AggressiveInlining)] public static Number W(this Quaternion self) => self.W;
        [MethodImpl(AggressiveInlining)] public static Number W(this System.Numerics.Quaternion self) => ((Quaternion)self).W;
        [MethodImpl(AggressiveInlining)] public static Quaternion WithX(this Quaternion self, Number x) => self.WithX(x);
        [MethodImpl(AggressiveInlining)] public static Quaternion WithX(this System.Numerics.Quaternion self, Number x) => ((Quaternion)self).WithX(x);
        [MethodImpl(AggressiveInlining)] public static Quaternion WithY(this Quaternion self, Number y) => self.WithY(y);
        [MethodImpl(AggressiveInlining)] public static Quaternion WithY(this System.Numerics.Quaternion self, Number y) => ((Quaternion)self).WithY(y);
        [MethodImpl(AggressiveInlining)] public static Quaternion WithZ(this Quaternion self, Number z) => self.WithZ(z);
        [MethodImpl(AggressiveInlining)] public static Quaternion WithZ(this System.Numerics.Quaternion self, Number z) => ((Quaternion)self).WithZ(z);
        [MethodImpl(AggressiveInlining)] public static Quaternion WithW(this Quaternion self, Number w) => self.WithW(w);
        [MethodImpl(AggressiveInlining)] public static Quaternion WithW(this System.Numerics.Quaternion self, Number w) => ((Quaternion)self).WithW(w);
        [MethodImpl(AggressiveInlining)] public static Number Length(this Quaternion self) => self.Length;
        [MethodImpl(AggressiveInlining)] public static Number Length(this System.Numerics.Quaternion self) => ((Quaternion)self).Length;
        [MethodImpl(AggressiveInlining)] public static Number LengthSquared(this Quaternion self) => self.LengthSquared;
        [MethodImpl(AggressiveInlining)] public static Number LengthSquared(this System.Numerics.Quaternion self) => ((Quaternion)self).LengthSquared;
        [MethodImpl(AggressiveInlining)] public static Quaternion Normalize(this Quaternion self) => self.Normalize;
        [MethodImpl(AggressiveInlining)] public static Quaternion Normalize(this System.Numerics.Quaternion self) => ((Quaternion)self).Normalize;
        [MethodImpl(AggressiveInlining)] public static Quaternion Conjugate(this Quaternion self) => self.Conjugate;
        [MethodImpl(AggressiveInlining)] public static Quaternion Conjugate(this System.Numerics.Quaternion self) => ((Quaternion)self).Conjugate;
        [MethodImpl(AggressiveInlining)] public static Quaternion Inverse(this Quaternion self) => self.Inverse;
        [MethodImpl(AggressiveInlining)] public static Quaternion Inverse(this System.Numerics.Quaternion self) => ((Quaternion)self).Inverse;
        [MethodImpl(AggressiveInlining)] public static Quaternion Add(this Quaternion a, Quaternion b) => a.Add(b);
        [MethodImpl(AggressiveInlining)] public static Quaternion Add(this System.Numerics.Quaternion a, Quaternion b) => ((Quaternion)a).Add(b);
        [MethodImpl(AggressiveInlining)] public static Quaternion Subtract(this Quaternion a, Quaternion b) => a.Subtract(b);
        [MethodImpl(AggressiveInlining)] public static Quaternion Subtract(this System.Numerics.Quaternion a, Quaternion b) => ((Quaternion)a).Subtract(b);
        [MethodImpl(AggressiveInlining)] public static Quaternion Negative(this Quaternion a) => a.Negative;
        [MethodImpl(AggressiveInlining)] public static Quaternion Negative(this System.Numerics.Quaternion a) => ((Quaternion)a).Negative;
        [MethodImpl(AggressiveInlining)] public static Quaternion Multiply(this Quaternion a, Quaternion b) => a.Multiply(b);
        [MethodImpl(AggressiveInlining)] public static Quaternion Multiply(this System.Numerics.Quaternion a, Quaternion b) => ((Quaternion)a).Multiply(b);
        [MethodImpl(AggressiveInlining)] public static Quaternion Multiply(this Quaternion a, Number scalar) => a.Multiply(scalar);
        [MethodImpl(AggressiveInlining)] public static Quaternion Multiply(this System.Numerics.Quaternion a, Number scalar) => ((Quaternion)a).Multiply(scalar);
        [MethodImpl(AggressiveInlining)] public static Quaternion Divide(this Quaternion a, Quaternion b) => a.Divide(b);
        [MethodImpl(AggressiveInlining)] public static Quaternion Divide(this System.Numerics.Quaternion a, Quaternion b) => ((Quaternion)a).Divide(b);
        [MethodImpl(AggressiveInlining)] public static Quaternion Concatenate(this Quaternion self, Quaternion value2) => self.Concatenate(value2);
        [MethodImpl(AggressiveInlining)] public static Quaternion Concatenate(this System.Numerics.Quaternion self, Quaternion value2) => ((Quaternion)self).Concatenate(value2);
        [MethodImpl(AggressiveInlining)] public static Number Dot(this Quaternion self, Quaternion quaternion2) => self.Dot(quaternion2);
        [MethodImpl(AggressiveInlining)] public static Number Dot(this System.Numerics.Quaternion self, Quaternion quaternion2) => ((Quaternion)self).Dot(quaternion2);
        [MethodImpl(AggressiveInlining)] public static Quaternion Lerp(this Quaternion self, Quaternion quaternion2, Number amount) => self.Lerp(quaternion2, amount);
        [MethodImpl(AggressiveInlining)] public static Quaternion Lerp(this System.Numerics.Quaternion self, Quaternion quaternion2, Number amount) => ((Quaternion)self).Lerp(quaternion2, amount);
        [MethodImpl(AggressiveInlining)] public static Quaternion Slerp(this Quaternion self, Quaternion quaternion2, Number amount) => self.Slerp(quaternion2, amount);
        [MethodImpl(AggressiveInlining)] public static Quaternion Slerp(this System.Numerics.Quaternion self, Quaternion quaternion2, Number amount) => ((Quaternion)self).Slerp(quaternion2, amount);
        [MethodImpl(AggressiveInlining)] public static Vector3 Transform(this System.Numerics.Quaternion q, Vector3 v) => ((Quaternion)q).Transform(v);
        [MethodImpl(AggressiveInlining)] public static Vector3 Multiply(this System.Numerics.Quaternion q, Vector3 v) => ((Quaternion)q).Multiply(v);
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 Matrix(this System.Numerics.Quaternion q) => ((Quaternion)q).Matrix;
        [MethodImpl(AggressiveInlining)] public static Matrix4x4 Matrix4x4(this System.Numerics.Quaternion q) => ((Quaternion)q).Matrix4x4;
        [MethodImpl(AggressiveInlining)] public static Number At(this System.Numerics.Quaternion xs, Integer n) => ((Quaternion)xs).At(n);
        [MethodImpl(AggressiveInlining)] public static Quaternion MapComponents(this System.Numerics.Quaternion x, System.Func<Number, Number> f) => ((Quaternion)x).MapComponents(f);
        [MethodImpl(AggressiveInlining)] public static Quaternion ZipComponents(this System.Numerics.Quaternion a, Quaternion b, System.Func<Number, Number, Number> f) => ((Quaternion)a).ZipComponents(b, f);
        [MethodImpl(AggressiveInlining)] public static Quaternion ZipComponents(this System.Numerics.Quaternion a, Quaternion b, Quaternion c, System.Func<Number, Number, Number, Number> f) => ((Quaternion)a).ZipComponents(b, c, f);
        [MethodImpl(AggressiveInlining)] public static Boolean AllZipComponents(this System.Numerics.Quaternion a, Quaternion b, System.Func<Number, Number, Boolean> f) => ((Quaternion)a).AllZipComponents(b, f);
        [MethodImpl(AggressiveInlining)] public static Boolean AllZipComponents(this System.Numerics.Quaternion a, Quaternion b, Quaternion c, System.Func<Number, Number, Number, Boolean> f) => ((Quaternion)a).AllZipComponents(b, c, f);
        [MethodImpl(AggressiveInlining)] public static Boolean AnyZipComponents(this System.Numerics.Quaternion a, Quaternion b, System.Func<Number, Number, Boolean> f) => ((Quaternion)a).AnyZipComponents(b, f);
        [MethodImpl(AggressiveInlining)] public static Boolean AnyZipComponents(this System.Numerics.Quaternion a, Quaternion b, Quaternion c, System.Func<Number, Number, Number, Boolean> f) => ((Quaternion)a).AnyZipComponents(b, c, f);
        [MethodImpl(AggressiveInlining)] public static Boolean AllComponents(this System.Numerics.Quaternion x, System.Func<Number, Boolean> predicate) => ((Quaternion)x).AllComponents(predicate);
        [MethodImpl(AggressiveInlining)] public static Boolean AnyComponent(this System.Numerics.Quaternion x, System.Func<Number, Boolean> predicate) => ((Quaternion)x).AnyComponent(predicate);
    }
}
